{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { format, isToday as fnsIsToday } from 'date-fns';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var SERVER_URL = 'http://31.129.101.174';\nexport var isToday = function isToday(date) {\n  return fnsIsToday(date);\n};\nfunction makeApiRequest(_x, _x2) {\n  return _makeApiRequest.apply(this, arguments);\n}\nfunction _makeApiRequest() {\n  _makeApiRequest = _asyncToGenerator(function* (method, url) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    try {\n      var response = yield axios[method](`${SERVER_URL}${url}`, data, {\n        params: params\n      });\n      return response.data;\n    } catch (e) {\n      console.error(`Ошибка при запросе к ${url}: `, e);\n      throw e;\n    }\n  });\n  return _makeApiRequest.apply(this, arguments);\n}\nexport var fetchTaskDates = function () {\n  var _ref = _asyncToGenerator(function* (setTaskDates) {\n    var data = yield makeApiRequest('get', '/task-dates');\n    setTaskDates(data);\n    yield AsyncStorage.setItem('taskDates', JSON.stringify(data));\n  });\n  return function fetchTaskDates(_x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchTasksForSelectedDate = function () {\n  var _ref2 = _asyncToGenerator(function* (selectedDate, setTasks) {\n    var formattedDate = format(selectedDate, 'yyyy-MM-dd');\n    var data = yield makeApiRequest('get', '/tasks', null, {\n      date: formattedDate\n    });\n    setTasks(data);\n  });\n  return function fetchTasksForSelectedDate(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchTasksForDetail = function () {\n  var _ref3 = _asyncToGenerator(function* (setTasks) {\n    var data = yield makeApiRequest('get', '/tasks');\n    setTasks(data);\n  });\n  return function fetchTasksForDetail(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchServiceNamesByIds = function () {\n  var _ref4 = _asyncToGenerator(function* (serviceIds) {\n    if (typeof serviceIds !== 'string') {\n      throw new Error('serviceIds должна быть строкой с идентификаторами, разделенными запятой');\n    }\n    if (serviceIds.trim().length === 0) {\n      return {\n        noServices: 'Услуга не выбрана'\n      };\n    }\n    var idsArray = serviceIds.split(',').map(function (id) {\n      return parseInt(id.trim(), 10);\n    });\n    var services = yield makeApiRequest('post', '/services/names', {\n      ids: idsArray\n    });\n    return services.reduce(function (acc, service) {\n      acc[service.id] = service.service_name;\n      return acc;\n    }, {});\n  });\n  return function fetchServiceNamesByIds(_x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var fetchDraftData = function () {\n  var _ref5 = _asyncToGenerator(function* (taskId) {\n    return yield makeApiRequest('get', `/tasks/draft/${taskId}`);\n  });\n  return function fetchDraftData(_x8) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var fetchTaskParticipants = function () {\n  var _ref6 = _asyncToGenerator(function* (taskId) {\n    var data = yield makeApiRequest('get', `/task-participants/${taskId}`);\n    if (!Array.isArray(data)) {\n      throw new Error(\"Некорректный формат данных\");\n    }\n    return data;\n  });\n  return function fetchTaskParticipants(_x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var fetchTaskDetails = function () {\n  var _ref7 = _asyncToGenerator(function* (taskId, setTask) {\n    var data = yield makeApiRequest('get', `/tasks/${taskId}`);\n    setTask(data);\n  });\n  return function fetchTaskDetails(_x10, _x11) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["format","isToday","fnsIsToday","axios","AsyncStorage","SERVER_URL","date","makeApiRequest","_x","_x2","_makeApiRequest","apply","arguments","_asyncToGenerator","method","url","data","length","undefined","params","response","e","console","error","fetchTaskDates","_ref","setTaskDates","setItem","JSON","stringify","_x3","fetchTasksForSelectedDate","_ref2","selectedDate","setTasks","formattedDate","_x4","_x5","fetchTasksForDetail","_ref3","_x6","fetchServiceNamesByIds","_ref4","serviceIds","Error","trim","noServices","idsArray","split","map","id","parseInt","services","ids","reduce","acc","service","service_name","_x7","fetchDraftData","_ref5","taskId","_x8","fetchTaskParticipants","_ref6","Array","isArray","_x9","fetchTaskDetails","_ref7","setTask","_x10","_x11"],"sources":["C:/Users/fred/Desktop/client/src/utils/tasks.js"],"sourcesContent":["import { format, isToday as fnsIsToday } from 'date-fns';\r\nimport axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport const SERVER_URL = 'http://31.129.101.174';\r\n\r\n// Упрощенная функция для проверки сегодняшней даты\r\nexport const isToday = (date) => fnsIsToday(date);\r\n\r\n// Универсальная функция для запросов к API\r\nasync function makeApiRequest(method, url, data = null, params = null) {\r\n  try {\r\n    const response = await axios[method](`${SERVER_URL}${url}`, data, { params });\r\n    return response.data;\r\n  } catch (e) {\r\n    console.error(`Ошибка при запросе к ${url}: `, e);\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport const fetchTaskDates = async (setTaskDates) => {\r\n  const data = await makeApiRequest('get', '/task-dates');\r\n  setTaskDates(data);\r\n  await AsyncStorage.setItem('taskDates', JSON.stringify(data));\r\n};\r\n\r\nexport const fetchTasksForSelectedDate = async (selectedDate, setTasks) => {\r\n  const formattedDate = format(selectedDate, 'yyyy-MM-dd');\r\n  const data = await makeApiRequest('get', '/tasks', null, { date: formattedDate });\r\n  setTasks(data);\r\n};\r\n\r\nexport const fetchTasksForDetail = async (setTasks) => {\r\n  const data = await makeApiRequest('get', '/tasks');\r\n  setTasks(data);\r\n};\r\n\r\nexport const fetchServiceNamesByIds = async (serviceIds) => {\r\n  if (typeof serviceIds !== 'string') {\r\n    throw new Error('serviceIds должна быть строкой с идентификаторами, разделенными запятой');\r\n  }\r\n  if (serviceIds.trim().length === 0) {\r\n    return { noServices: 'Услуга не выбрана' };\r\n  }\r\n  const idsArray = serviceIds.split(',').map(id => parseInt(id.trim(), 10));\r\n  const services = await makeApiRequest('post', '/services/names', { ids: idsArray });\r\n  return services.reduce((acc, service) => {\r\n    acc[service.id] = service.service_name;\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const fetchDraftData = async (taskId) => {\r\n  return await makeApiRequest('get', `/tasks/draft/${taskId}`);\r\n};\r\n\r\nexport const fetchTaskParticipants = async (taskId) => {\r\n  const data = await makeApiRequest('get', `/task-participants/${taskId}`);\r\n  if (!Array.isArray(data)) {\r\n    throw new Error(\"Некорректный формат данных\");\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const fetchTaskDetails = async (taskId, setTask) => {\r\n  const data = await makeApiRequest('get', `/tasks/${taskId}`);\r\n  setTask(data);\r\n};\r\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,OAAO,IAAIC,UAAU,QAAQ,UAAU;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,OAAO,IAAMC,UAAU,GAAG,uBAAuB;AAGjD,OAAO,IAAMJ,OAAO,GAAG,SAAVA,OAAOA,CAAIK,IAAI;EAAA,OAAKJ,UAAU,CAACI,IAAI,CAAC;AAAA;AAAC,SAGnCC,cAAcA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,gBAAA;EAAAA,eAAA,GAAAG,iBAAA,CAA7B,WAA8BC,MAAM,EAAEC,GAAG,EAA8B;IAAA,IAA5BC,IAAI,GAAAJ,SAAA,CAAAK,MAAA,QAAAL,SAAA,QAAAM,SAAA,GAAAN,SAAA,MAAG,IAAI;IAAA,IAAEO,MAAM,GAAAP,SAAA,CAAAK,MAAA,QAAAL,SAAA,QAAAM,SAAA,GAAAN,SAAA,MAAG,IAAI;IACnE,IAAI;MACF,IAAMQ,QAAQ,SAASjB,KAAK,CAACW,MAAM,CAAC,CAAE,GAAET,UAAW,GAAEU,GAAI,EAAC,EAAEC,IAAI,EAAE;QAAEG,MAAM,EAANA;MAAO,CAAC,CAAC;MAC7E,OAAOC,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOK,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAE,wBAAuBR,GAAI,IAAG,EAAEM,CAAC,CAAC;MACjD,MAAMA,CAAC;IACT;EACF,CAAC;EAAA,OAAAX,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAO,IAAMY,cAAc;EAAA,IAAAC,IAAA,GAAAZ,iBAAA,CAAG,WAAOa,YAAY,EAAK;IACpD,IAAMV,IAAI,SAAST,cAAc,CAAC,KAAK,EAAE,aAAa,CAAC;IACvDmB,YAAY,CAACV,IAAI,CAAC;IAClB,MAAMZ,YAAY,CAACuB,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;EAC/D,CAAC;EAAA,gBAJYQ,cAAcA,CAAAM,GAAA;IAAA,OAAAL,IAAA,CAAAd,KAAA,OAAAC,SAAA;EAAA;AAAA,GAI1B;AAED,OAAO,IAAMmB,yBAAyB;EAAA,IAAAC,KAAA,GAAAnB,iBAAA,CAAG,WAAOoB,YAAY,EAAEC,QAAQ,EAAK;IACzE,IAAMC,aAAa,GAAGnC,MAAM,CAACiC,YAAY,EAAE,YAAY,CAAC;IACxD,IAAMjB,IAAI,SAAST,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;MAAED,IAAI,EAAE6B;IAAc,CAAC,CAAC;IACjFD,QAAQ,CAAClB,IAAI,CAAC;EAChB,CAAC;EAAA,gBAJYe,yBAAyBA,CAAAK,GAAA,EAAAC,GAAA;IAAA,OAAAL,KAAA,CAAArB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAIrC;AAED,OAAO,IAAM0B,mBAAmB;EAAA,IAAAC,KAAA,GAAA1B,iBAAA,CAAG,WAAOqB,QAAQ,EAAK;IACrD,IAAMlB,IAAI,SAAST,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC;IAClD2B,QAAQ,CAAClB,IAAI,CAAC;EAChB,CAAC;EAAA,gBAHYsB,mBAAmBA,CAAAE,GAAA;IAAA,OAAAD,KAAA,CAAA5B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAG/B;AAED,OAAO,IAAM6B,sBAAsB;EAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAG,WAAO8B,UAAU,EAAK;IAC1D,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,yEAAyE,CAAC;IAC5F;IACA,IAAID,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC5B,MAAM,KAAK,CAAC,EAAE;MAClC,OAAO;QAAE6B,UAAU,EAAE;MAAoB,CAAC;IAC5C;IACA,IAAMC,QAAQ,GAAGJ,UAAU,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAAC,EAAE;MAAA,OAAIC,QAAQ,CAACD,EAAE,CAACL,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;IAAA,EAAC;IACzE,IAAMO,QAAQ,SAAS7C,cAAc,CAAC,MAAM,EAAE,iBAAiB,EAAE;MAAE8C,GAAG,EAAEN;IAAS,CAAC,CAAC;IACnF,OAAOK,QAAQ,CAACE,MAAM,CAAC,UAACC,GAAG,EAAEC,OAAO,EAAK;MACvCD,GAAG,CAACC,OAAO,CAACN,EAAE,CAAC,GAAGM,OAAO,CAACC,YAAY;MACtC,OAAOF,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC;EAAA,gBAbYd,sBAAsBA,CAAAiB,GAAA;IAAA,OAAAhB,KAAA,CAAA/B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAalC;AAED,OAAO,IAAM+C,cAAc;EAAA,IAAAC,KAAA,GAAA/C,iBAAA,CAAG,WAAOgD,MAAM,EAAK;IAC9C,aAAatD,cAAc,CAAC,KAAK,EAAG,gBAAesD,MAAO,EAAC,CAAC;EAC9D,CAAC;EAAA,gBAFYF,cAAcA,CAAAG,GAAA;IAAA,OAAAF,KAAA,CAAAjD,KAAA,OAAAC,SAAA;EAAA;AAAA,GAE1B;AAED,OAAO,IAAMmD,qBAAqB;EAAA,IAAAC,KAAA,GAAAnD,iBAAA,CAAG,WAAOgD,MAAM,EAAK;IACrD,IAAM7C,IAAI,SAAST,cAAc,CAAC,KAAK,EAAG,sBAAqBsD,MAAO,EAAC,CAAC;IACxE,IAAI,CAACI,KAAK,CAACC,OAAO,CAAClD,IAAI,CAAC,EAAE;MACxB,MAAM,IAAI4B,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IACA,OAAO5B,IAAI;EACb,CAAC;EAAA,gBANY+C,qBAAqBA,CAAAI,GAAA;IAAA,OAAAH,KAAA,CAAArD,KAAA,OAAAC,SAAA;EAAA;AAAA,GAMjC;AAED,OAAO,IAAMwD,gBAAgB;EAAA,IAAAC,KAAA,GAAAxD,iBAAA,CAAG,WAAOgD,MAAM,EAAES,OAAO,EAAK;IACzD,IAAMtD,IAAI,SAAST,cAAc,CAAC,KAAK,EAAG,UAASsD,MAAO,EAAC,CAAC;IAC5DS,OAAO,CAACtD,IAAI,CAAC;EACf,CAAC;EAAA,gBAHYoD,gBAAgBA,CAAAG,IAAA,EAAAC,IAAA;IAAA,OAAAH,KAAA,CAAA1D,KAAA,OAAAC,SAAA;EAAA;AAAA,GAG5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}