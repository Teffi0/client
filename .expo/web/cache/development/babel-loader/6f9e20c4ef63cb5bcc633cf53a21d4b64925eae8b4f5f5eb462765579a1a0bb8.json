{"ast":null,"code":"import React, { memo, useMemo, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport VirtualizedList from \"react-native-web/dist/exports/VirtualizedList\";\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, isSameMonth, isSameDay } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport styles from \"../styles/styles\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Day = memo(function (_ref) {\n  var day = _ref.day,\n    handleDatePress = _ref.handleDatePress,\n    isSelectedDay = _ref.isSelectedDay,\n    hasTask = _ref.hasTask;\n  var onPress = useCallback(function () {\n    if (day) {\n      handleDatePress(day);\n    }\n  }, [day, handleDatePress]);\n  var dayButtonStyle = day ? [styles.dayButton, {\n    flex: 1\n  }] : null;\n  var formattedDay = day ? format(day, 'd', {\n    locale: ru\n  }) : '';\n  return _jsx(View, {\n    style: styles.dayContainer,\n    children: _jsx(TouchableOpacity, {\n      style: dayButtonStyle,\n      onPress: onPress,\n      disabled: !day,\n      children: day && _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: [styles.dayText, isSelectedDay ? styles.today : null],\n          children: formattedDay\n        }), _jsx(View, {\n          style: [styles.taskDot, hasTask && styles.taskDotActive]\n        })]\n      })\n    })\n  });\n});\nDay.propTypes = {\n  day: PropTypes.instanceOf(Date),\n  handleDatePress: PropTypes.func.isRequired,\n  isSelectedDay: PropTypes.bool.isRequired,\n  hasTask: PropTypes.bool.isRequired\n};\nvar RenderMonth = React.memo(function (_ref2) {\n  var date = _ref2.date,\n    handleDatePress = _ref2.handleDatePress,\n    taskDates = _ref2.taskDates;\n  var memoizedHandleDatePress = useCallback(handleDatePress, []);\n  var weeks = useMemo(function () {\n    var weeksArray = [];\n    var currentWeek = [];\n    var currentDay = startOfWeek(startOfMonth(date));\n    while (currentDay <= endOfWeek(endOfMonth(date))) {\n      for (var i = 0; i < 7; i++) {\n        currentWeek.push(isSameMonth(currentDay, date) ? currentDay : null);\n        currentDay = addDays(currentDay, 1);\n      }\n      weeksArray.push(currentWeek);\n      currentWeek = [];\n    }\n    return weeksArray;\n  }, [date]);\n  var renderItem = useCallback(function (_ref3) {\n    var week = _ref3.item,\n      weekIndex = _ref3.index;\n    return _jsx(View, {\n      style: styles.weekContainer,\n      children: week.map(function (day, dayIndex) {\n        if (!day) {\n          return _jsx(Day, {\n            day: null,\n            handleDatePress: handleDatePress,\n            isSelectedDay: false,\n            hasTask: false\n          }, `empty-${weekIndex}-${dayIndex}`);\n        }\n        var isSelectedDay = isSameDay(day, new Date());\n        var formattedDate = format(day, 'yyyy-MM-dd');\n        var hasTask = taskDates[formattedDate] === 'в процессе' || taskDates[formattedDate] === 'новая';\n        return _jsx(Day, {\n          day: day,\n          handleDatePress: handleDatePress,\n          isSelectedDay: isSelectedDay,\n          hasTask: hasTask\n        }, formattedDate);\n      })\n    });\n  }, [memoizedHandleDatePress, taskDates]);\n  var getItemCount = function getItemCount() {\n    return weeks.length;\n  };\n  var getItem = function getItem(data, index) {\n    return weeks[index];\n  };\n  return _jsxs(View, {\n    style: styles.monthContainer,\n    children: [_jsx(Text, {\n      style: styles.monthName,\n      children: format(date, 'MMMM', {\n        locale: ru\n      })\n    }), _jsx(VirtualizedList, {\n      data: weeks,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item, index) {\n        return `week-${index}`;\n      },\n      getItemCount: getItemCount,\n      getItem: getItem\n    })]\n  });\n});\nRenderMonth.propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n  handleDatePress: PropTypes.func.isRequired,\n  taskDates: PropTypes.object.isRequired\n};\nexport default RenderMonth;","map":{"version":3,"names":["React","memo","useMemo","useCallback","View","Text","TouchableOpacity","VirtualizedList","format","startOfMonth","endOfMonth","startOfWeek","endOfWeek","addDays","isSameMonth","isSameDay","ru","styles","PropTypes","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Day","_ref","day","handleDatePress","isSelectedDay","hasTask","onPress","dayButtonStyle","dayButton","flex","formattedDay","locale","style","dayContainer","children","disabled","dayText","today","taskDot","taskDotActive","propTypes","instanceOf","Date","func","isRequired","bool","RenderMonth","_ref2","date","taskDates","memoizedHandleDatePress","weeks","weeksArray","currentWeek","currentDay","i","push","renderItem","_ref3","week","item","weekIndex","index","weekContainer","map","dayIndex","formattedDate","getItemCount","length","getItem","data","monthContainer","monthName","keyExtractor","object"],"sources":["C:/Users/fred/Desktop/crm/src/components/RenderMonth.js"],"sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\r\nimport { View, Text, TouchableOpacity, VirtualizedList } from 'react-native';\r\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, isSameMonth, isSameDay } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from '../styles/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Day = memo(({ day, handleDatePress, isSelectedDay, hasTask }) => {\r\n    const onPress = useCallback(() => {\r\n        if (day) {\r\n            handleDatePress(day);\r\n        }\r\n    }, [day, handleDatePress]);\r\n\r\n    const dayButtonStyle = day ? [styles.dayButton, { flex: 1 }] : null;\r\n    const formattedDay = day ? format(day, 'd', { locale: ru }) : '';  // Оптимизированная проверка\r\n\r\n    return (\r\n        <View style={styles.dayContainer}>\r\n            <TouchableOpacity\r\n                style={dayButtonStyle}\r\n                onPress={onPress}\r\n                disabled={!day}\r\n            >\r\n                {day && (\r\n                    <>\r\n                        <Text style={[styles.dayText, isSelectedDay ? styles.today : null]}>\r\n                            {formattedDay}\r\n                        </Text>\r\n                        <View style={[styles.taskDot, hasTask && styles.taskDotActive]} />\r\n                    </>\r\n                )}\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n});\r\n\r\nDay.propTypes = {\r\n    day: PropTypes.instanceOf(Date),\r\n    handleDatePress: PropTypes.func.isRequired,\r\n    isSelectedDay: PropTypes.bool.isRequired,\r\n    hasTask: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst RenderMonth = React.memo(({ date, handleDatePress, taskDates }) => {\r\n    const memoizedHandleDatePress = useCallback(handleDatePress, []);\r\n\r\n    const weeks = useMemo(() => {\r\n        const weeksArray = [];\r\n        let currentWeek = [];\r\n        let currentDay = startOfWeek(startOfMonth(date));\r\n\r\n        while (currentDay <= endOfWeek(endOfMonth(date))) {\r\n            for (let i = 0; i < 7; i++) {\r\n                currentWeek.push(isSameMonth(currentDay, date) ? currentDay : null);\r\n                currentDay = addDays(currentDay, 1);\r\n            }\r\n\r\n            weeksArray.push(currentWeek);\r\n            currentWeek = [];\r\n        }\r\n\r\n        return weeksArray;\r\n    }, [date]);\r\n\r\n    const renderItem = useCallback(({ item: week, index: weekIndex }) => (\r\n        <View style={styles.weekContainer}>\r\n            {week.map((day, dayIndex) => {\r\n                if (!day) {\r\n                    return (\r\n                        <Day\r\n                            key={`empty-${weekIndex}-${dayIndex}`}\r\n                            day={null}\r\n                            handleDatePress={handleDatePress}\r\n                            isSelectedDay={false}\r\n                            hasTask={false}\r\n                        />\r\n                    );\r\n                }\r\n                const isSelectedDay = isSameDay(day, new Date());\r\n                const formattedDate = format(day, 'yyyy-MM-dd');\r\n                const hasTask = taskDates[formattedDate] === 'в процессе' || taskDates[formattedDate] === 'новая';\r\n    \r\n                return (\r\n                    <Day\r\n                        key={formattedDate}\r\n                        day={day}\r\n                        handleDatePress={handleDatePress}\r\n                        isSelectedDay={isSelectedDay}\r\n                        hasTask={hasTask}\r\n                    />\r\n                );\r\n            })}\r\n        </View>\r\n    ), [memoizedHandleDatePress, taskDates]);\r\n\r\n    const getItemCount = () => weeks.length;\r\n    const getItem = (data, index) => weeks[index];\r\n\r\n    return (\r\n        <View style={styles.monthContainer}>\r\n            <Text style={styles.monthName}>{format(date, 'MMMM', { locale: ru })}</Text>\r\n            <VirtualizedList\r\n                data={weeks}\r\n                renderItem={renderItem}\r\n                keyExtractor={(item, index) => `week-${index}`}\r\n                getItemCount={getItemCount}\r\n                getItem={getItem}\r\n            />\r\n        </View>\r\n    );\r\n});\r\n\r\nRenderMonth.propTypes = {\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n    handleDatePress: PropTypes.func.isRequired,\r\n    taskDates: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RenderMonth;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}