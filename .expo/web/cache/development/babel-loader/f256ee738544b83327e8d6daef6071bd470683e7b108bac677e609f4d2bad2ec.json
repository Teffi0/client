{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _icons = require(\"../icons\");\nvar _styles = _interopRequireWildcard(require(\"../styles/styles\"));\nvar _native = require(\"@react-navigation/native\");\nvar _utils = require(\"../utils/utils\");\nvar _tasks = require(\"../utils/tasks\");\nvar _NewTaskScreen = _interopRequireDefault(require(\"../screens/NewTaskScreen\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\fred\\\\Desktop\\\\client\\\\src\\\\components\\\\TaskComponent.js\";\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar getStatusColor = function getStatusColor(status) {\n  switch (status) {\n    case 'новая':\n      return _styles.colors.newStatus;\n    case 'в процессе':\n      return _styles.colors.inProcessStatus;\n    case 'выполнено':\n      return _styles.colors.finishedStatus;\n    case 'черновик':\n      return _styles.colors.grey;\n    default:\n      return _styles.colors.grey;\n  }\n};\nvar TaskComponent = _react.default.memo(function (props) {\n  var _useState = (0, _react.useState)('Услуга не указана'),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    serviceName = _useState2[0],\n    setServiceName = _useState2[1];\n  var _useState3 = (0, _react.useState)(false),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    isNewTaskScreenVisible = _useState4[0],\n    setNewTaskScreenVisible = _useState4[1];\n  var _useState5 = (0, _react.useState)(null),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    draftData = _useState6[0],\n    setDraftData = _useState6[1];\n  (0, _react.useEffect)(function () {\n    (0, _asyncToGenerator2.default)(function* () {\n      var services = yield (0, _tasks.fetchServiceNamesByIds)(props.service);\n      setServiceName(Object.values(services).join(', '));\n    })();\n  }, [props.service]);\n  (0, _react.useEffect)(function () {\n    if (props.status === 'черновик') {\n      (0, _asyncToGenerator2.default)(function* () {\n        var data = yield (0, _tasks.fetchDraftData)(props.id);\n        setDraftData(data);\n      })();\n    }\n  }, [props.id, props.status]);\n  var statusColor = getStatusColor(props.status);\n  var navigation = (0, _native.useNavigation)();\n  var handleTaskPress = function handleTaskPress() {\n    if (props.status === 'черновик' && draftData) {\n      setNewTaskScreenVisible(true);\n    } else {\n      navigation.navigate('TaskDetail', {\n        screen: 'TaskDetailScreen',\n        params: Object.assign({}, props, {\n          serviceName: serviceName\n        })\n      });\n    }\n  };\n  var formattedStartTime = props.start_time ? (0, _utils.formatTime)(props.start_time) : 'Не указано';\n  var formattedEndTime = props.end_time ? (0, _utils.formatTime)(props.end_time) : 'Не указано';\n  var addressText = props.address_client ? (0, _utils.formatAddress)(props.address_client) : 'Адрес не указан';\n  var employeesText = props.employees ? `${props.employees} участник${props.employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\n  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {\n    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n      onPress: handleTaskPress,\n      accessibilityLabel: `Task ${serviceName}`,\n      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: [_styles.default.task, {\n          borderColor: statusColor\n        }],\n        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n          style: _styles.default.taskHeader,\n          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n            style: _styles.default.taskHeaderLeft,\n            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n              style: _styles.default.taskTime,\n              children: formattedStartTime\n            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n              style: _styles.default.taskTime,\n              children: [\" - \", formattedEndTime]\n            })]\n          }), (0, _jsxRuntime.jsx)(_reactNative.View, {\n            style: _styles.default.taskHeaderRight,\n            children: (0, _jsxRuntime.jsx)(_reactNative.View, {\n              style: [_styles.default.taskStatus, {\n                backgroundColor: statusColor\n              }],\n              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n                style: _styles.default.taskStatusText,\n                children: props.status\n              })\n            })\n          })]\n        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n          style: _styles.default.taskContent,\n          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n            style: _styles.default.taskTitle,\n            children: serviceName\n          }), (0, _jsxRuntime.jsx)(_icons.FollowIcon, {\n            style: _styles.default.taskStatusIcon\n          })]\n        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n          style: _styles.default.taskFooter,\n          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n            style: _styles.default.taskFooterBlock,\n            children: [(0, _jsxRuntime.jsx)(_icons.ProfileIcon, {}), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n              style: _styles.default.taskFooterText,\n              children: employeesText\n            })]\n          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n            style: _styles.default.taskFooterBlock,\n            children: [(0, _jsxRuntime.jsx)(_icons.LocationIcon, {}), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n              style: _styles.default.taskFooterText,\n              children: addressText\n            })]\n          })]\n        })]\n      })\n    }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {\n      visible: isNewTaskScreenVisible,\n      animationType: \"slide\",\n      onRequestClose: function onRequestClose() {\n        return setNewTaskScreenVisible(false);\n      },\n      children: (0, _jsxRuntime.jsx)(_NewTaskScreen.default, {\n        onClose: function onClose() {\n          return setNewTaskScreenVisible(false);\n        },\n        draftData: draftData\n      })\n    })]\n  });\n});\nvar _default = exports.default = TaskComponent;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_icons","_styles","_native","_utils","_tasks","_NewTaskScreen","_interopRequireDefault","_jsxRuntime","_this","_jsxFileName","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","getStatusColor","status","colors","newStatus","inProcessStatus","finishedStatus","grey","TaskComponent","React","memo","props","_useState","useState","_useState2","_slicedToArray2","serviceName","setServiceName","_useState3","_useState4","isNewTaskScreenVisible","setNewTaskScreenVisible","_useState5","_useState6","draftData","setDraftData","useEffect","_asyncToGenerator2","services","fetchServiceNamesByIds","service","values","join","data","fetchDraftData","id","statusColor","navigation","useNavigation","handleTaskPress","navigate","screen","params","assign","formattedStartTime","start_time","formatTime","formattedEndTime","end_time","addressText","address_client","formatAddress","employeesText","employees","jsxs","Fragment","children","jsx","TouchableOpacity","onPress","accessibilityLabel","View","style","styles","task","borderColor","taskHeader","taskHeaderLeft","Text","taskTime","taskHeaderRight","taskStatus","backgroundColor","taskStatusText","taskContent","taskTitle","FollowIcon","taskStatusIcon","taskFooter","taskFooterBlock","ProfileIcon","taskFooterText","LocationIcon","Modal","visible","animationType","onRequestClose","onClose","_default","exports"],"sources":["C:/Users/fred/Desktop/client/src/components/TaskComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport { FollowIcon, ProfileIcon, LocationIcon } from '../icons';\r\nimport styles, { colors } from '../styles/styles';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { formatTime, formatAddress } from '../utils/utils'; // Импорт функций из utils.js\r\nimport { fetchServiceNamesByIds, fetchDraftData } from '../utils/tasks';\r\nimport NewTaskScreen from '../screens/NewTaskScreen';\r\n\r\n/**\r\n * Компонент для отображения задачи в списке.\r\n * @param {Object} props - Пропсы компонента.\r\n * @param {string} props.status - Статус задачи.\r\n * @param {string} props.start_time - Время начала задачи.\r\n * @param {string} props.end_time - Время начала задачи.\r\n * @param {string} props.service - Название услуги.\r\n * @param {string} props.address_client - Адрес клиента.\r\n * @param {number} props.employees - Количество сотрудников.\r\n * @param {number} props.id - ID задачи.\r\n */\r\n\r\nconst getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'новая':\r\n      return colors.newStatus;\r\n    case 'в процессе':\r\n      return colors.inProcessStatus;\r\n    case 'выполнено':\r\n      return colors.finishedStatus;\r\n    case 'черновик':\r\n      return colors.grey;\r\n    default:\r\n      return colors.grey; // Цвет по умолчанию\r\n  }\r\n};\r\n\r\nconst TaskComponent = React.memo((props) => {\r\n  const [serviceName, setServiceName] = useState('Услуга не указана');\r\n  const [isNewTaskScreenVisible, setNewTaskScreenVisible] = useState(false);\r\n  const [draftData, setDraftData] = useState(null); // Состояние для хранения данных черновика\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const services = await fetchServiceNamesByIds(props.service);\r\n      setServiceName(Object.values(services).join(', '));\r\n    })();\r\n  }, [props.service]);\r\n\r\n  useEffect(() => {\r\n    if (props.status === 'черновик') {\r\n      // Асинхронно загружаем данные черновика и сохраняем их в состоянии\r\n      (async () => {\r\n        const data = await fetchDraftData(props.id);\r\n        setDraftData(data);\r\n      })();\r\n    }\r\n  }, [props.id, props.status]);\r\n\r\n  const statusColor = getStatusColor(props.status);\r\n  const navigation = useNavigation();\r\n\r\n  const handleTaskPress = () => {\r\n    if (props.status === 'черновик' && draftData) {\r\n      setNewTaskScreenVisible(true); \r\n    } else {\r\n      navigation.navigate('TaskDetail', {\r\n        screen: 'TaskDetailScreen',\r\n        params: { ...props, serviceName },\r\n      });\r\n    }\r\n  };\r\n\r\n  const formattedStartTime = props.start_time ? formatTime(props.start_time) : 'Не указано';\r\n  const formattedEndTime = props.end_time ? formatTime(props.end_time) : 'Не указано';\r\n  const addressText = props.address_client ? formatAddress(props.address_client) : 'Адрес не указан';\r\n  const employeesText = props.employees ? `${props.employees} участник${props.employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity onPress={handleTaskPress} accessibilityLabel={`Task ${serviceName}`}>\r\n        <View style={[styles.task, { borderColor: statusColor }]}>\r\n          <View style={styles.taskHeader}>\r\n            <View style={styles.taskHeaderLeft}>\r\n              <Text style={styles.taskTime}>{formattedStartTime}</Text>\r\n              <Text style={styles.taskTime}> - {formattedEndTime}</Text>\r\n            </View>\r\n            <View style={styles.taskHeaderRight}>\r\n              <View style={[styles.taskStatus, { backgroundColor: statusColor }]}>\r\n                <Text style={styles.taskStatusText}>{props.status}</Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View style={styles.taskContent}>\r\n            <Text style={styles.taskTitle}>{serviceName}</Text>\r\n            <FollowIcon style={styles.taskStatusIcon} />\r\n          </View>\r\n          <View style={styles.taskFooter}>\r\n            <View style={styles.taskFooterBlock}>\r\n              <ProfileIcon />\r\n              <Text style={styles.taskFooterText}>{employeesText}</Text>\r\n            </View>\r\n            <View style={styles.taskFooterBlock}>\r\n              <LocationIcon />\r\n              <Text style={styles.taskFooterText}>{addressText}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n      <Modal\r\n        visible={isNewTaskScreenVisible}\r\n        animationType=\"slide\"\r\n        onRequestClose={() => setNewTaskScreenVisible(false)}\r\n      >\r\n        <NewTaskScreen onClose={() => setNewTaskScreenVisible(false)} draftData={draftData} />\r\n      </Modal>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TaskComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}