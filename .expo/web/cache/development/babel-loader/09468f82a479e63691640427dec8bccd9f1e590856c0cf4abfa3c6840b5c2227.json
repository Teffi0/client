{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { format, parseISO } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nvar safeFormat = function safeFormat(date, formatString) {\n  try {\n    return format(date, formatString, {\n      locale: ru\n    });\n  } catch (error) {\n    console.error('Ошибка при форматировании:', error);\n    return '';\n  }\n};\nexport var formatDate = function formatDate(isoString) {\n  return safeFormat(parseISO(isoString), 'dd.MM.yyyy');\n};\nexport var formatTime = function formatTime(timeString) {\n  var _timeString$split = timeString.split(':'),\n    _timeString$split2 = _slicedToArray(_timeString$split, 2),\n    hours = _timeString$split2[0],\n    minutes = _timeString$split2[1];\n  var time = new Date();\n  time.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0);\n  return safeFormat(time, 'HH:mm');\n};\nexport var formatDateTime = function formatDateTime(isoString) {\n  return safeFormat(parseISO(isoString), 'dd.MM.yyyy HH:mm');\n};","map":{"version":3,"names":["format","parseISO","ru","safeFormat","date","formatString","locale","error","console","formatDate","isoString","formatTime","timeString","_timeString$split","split","_timeString$split2","_slicedToArray","hours","minutes","time","Date","setHours","parseInt","formatDateTime"],"sources":["C:/Users/fred/Desktop/client/src/utils/dateFormatter.js"],"sourcesContent":["import { format, parseISO } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\n\r\nconst safeFormat = (date, formatString) => {\r\n  try {\r\n    return format(date, formatString, { locale: ru });\r\n  } catch (error) {\r\n    console.error('Ошибка при форматировании:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\nexport const formatDate = (isoString) => safeFormat(parseISO(isoString), 'dd.MM.yyyy');\r\n\r\nexport const formatTime = (timeString) => {\r\n  const [hours, minutes] = timeString.split(':');\r\n  const time = new Date();\r\n  time.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0);\r\n  return safeFormat(time, 'HH:mm');\r\n};\r\n\r\nexport const formatDateTime = (isoString) => safeFormat(parseISO(isoString), 'dd.MM.yyyy HH:mm');\r\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,UAAU;AAC3C,SAASC,EAAE,QAAQ,iBAAiB;AAEpC,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAI,EAAEC,YAAY,EAAK;EACzC,IAAI;IACF,OAAOL,MAAM,CAACI,IAAI,EAAEC,YAAY,EAAE;MAAEC,MAAM,EAAEJ;IAAG,CAAC,CAAC;EACnD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAIC,SAAS;EAAA,OAAKP,UAAU,CAACF,QAAQ,CAACS,SAAS,CAAC,EAAE,YAAY,CAAC;AAAA;AAEtF,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,UAAU,EAAK;EACxC,IAAAC,iBAAA,GAAyBD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;IAAAC,kBAAA,GAAAC,cAAA,CAAAH,iBAAA;IAAvCI,KAAK,GAAAF,kBAAA;IAAEG,OAAO,GAAAH,kBAAA;EACrB,IAAMI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACvBD,IAAI,CAACE,QAAQ,CAACC,QAAQ,CAACL,KAAK,EAAE,EAAE,CAAC,EAAEK,QAAQ,CAACJ,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5D,OAAOf,UAAU,CAACgB,IAAI,EAAE,OAAO,CAAC;AAClC,CAAC;AAED,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIb,SAAS;EAAA,OAAKP,UAAU,CAACF,QAAQ,CAACS,SAAS,CAAC,EAAE,kBAAkB,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}