{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport styles from \"../styles/styles\";\nimport { CalendarIcon, TodayIcon } from \"../icons\";\nimport AddButton from \"../components/AddButton\";\nimport CustomCalendar from \"../components/CustomCalendar\";\nimport VerticalCalendar from \"../components/VerticalCalendar\";\nimport NewTaskScreen from \"./NewTaskScreen\";\nimport { isToday, fetchTasksAndDates } from \"../utils/tasks\";\nimport { taskEventEmitter } from \"../Events\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar VIEW_MODES = {\n  TODAY: 'today',\n  CALENDAR: 'calendar'\n};\nvar TasksScreen = function TasksScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isNewTaskScreenVisible = _useState4[0],\n    setNewTaskScreenVisible = _useState4[1];\n  var _useState5 = useState(new Date()),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedDate = _useState6[0],\n    setSelectedDate = _useState6[1];\n  var _useState7 = useState(VIEW_MODES.TODAY),\n    _useState8 = _slicedToArray(_useState7, 2),\n    viewMode = _useState8[0],\n    setViewMode = _useState8[1];\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      return fetchTasksAndDates(selectedDate, setTasks);\n    };\n    fetchData();\n    var handleTaskUpdate = function handleTaskUpdate() {\n      return fetchData();\n    };\n    taskEventEmitter.on('taskUpdated', handleTaskUpdate);\n    return function () {\n      return taskEventEmitter.off('taskUpdated', handleTaskUpdate);\n    };\n  }, [selectedDate]);\n  var handleViewModeToggle = useCallback(function () {\n    setViewMode(function (prevMode) {\n      return prevMode === VIEW_MODES.TODAY ? VIEW_MODES.CALENDAR : VIEW_MODES.TODAY;\n    });\n  }, []);\n  var calendarComponent = useMemo(function () {\n    var CalendarComponent = viewMode === VIEW_MODES.TODAY ? CustomCalendar : VerticalCalendar;\n    return _jsx(CalendarComponent, {\n      selectedDate: selectedDate,\n      onDateChange: setSelectedDate,\n      tasks: tasks\n    });\n  }, [viewMode, selectedDate, tasks]);\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.contentContainer,\n      children: [_jsxs(View, {\n        style: styles.taskHeader,\n        children: [_jsx(Text, {\n          style: styles.titleMedium,\n          children: viewMode === VIEW_MODES.TODAY ? isToday(selectedDate) ? 'Сегодня' : format(selectedDate, 'd MMMM', {\n            locale: ru\n          }) : 'Календарь'\n        }), _jsxs(View, {\n          style: styles.calendarBlock,\n          children: [viewMode === VIEW_MODES.TODAY && _jsx(Text, {\n            style: styles.title,\n            children: format(selectedDate, 'MMMM, yyyy', {\n              locale: ru\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: handleViewModeToggle,\n            children: viewMode === VIEW_MODES.TODAY ? _jsx(CalendarIcon, {}) : _jsx(TodayIcon, {})\n          })]\n        })]\n      }), calendarComponent, viewMode === VIEW_MODES.TODAY && _jsx(AddButton, {\n        onPress: function onPress() {\n          return setNewTaskScreenVisible(true);\n        }\n      })]\n    }), _jsx(Modal, {\n      visible: isNewTaskScreenVisible,\n      onRequestClose: function onRequestClose() {\n        return setNewTaskScreenVisible(false);\n      },\n      children: _jsx(NewTaskScreen, {\n        onClose: function onClose() {\n          return setNewTaskScreenVisible(false);\n        }\n      })\n    })]\n  });\n};\nexport default TasksScreen;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","View","Text","TouchableOpacity","Modal","SafeAreaView","format","ru","styles","CalendarIcon","TodayIcon","AddButton","CustomCalendar","VerticalCalendar","NewTaskScreen","isToday","fetchTasksAndDates","taskEventEmitter","jsx","_jsx","jsxs","_jsxs","VIEW_MODES","TODAY","CALENDAR","TasksScreen","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","isNewTaskScreenVisible","setNewTaskScreenVisible","_useState5","Date","_useState6","selectedDate","setSelectedDate","_useState7","_useState8","viewMode","setViewMode","fetchData","handleTaskUpdate","on","off","handleViewModeToggle","prevMode","calendarComponent","CalendarComponent","onDateChange","style","container","children","contentContainer","taskHeader","titleMedium","locale","calendarBlock","title","onPress","visible","onRequestClose","onClose"],"sources":["C:/Users/fred/Desktop/client/src/screens/TasksScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { format } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from '../styles/styles';\r\nimport { CalendarIcon, TodayIcon } from '../icons';\r\nimport AddButton from '../components/AddButton';\r\nimport CustomCalendar from '../components/CustomCalendar';\r\nimport VerticalCalendar from '../components/VerticalCalendar';\r\nimport NewTaskScreen from './NewTaskScreen';\r\nimport { isToday, fetchTasksAndDates } from '../utils/tasks';\r\nimport { taskEventEmitter } from '../Events'; \r\n\r\nconst VIEW_MODES = {\r\n  TODAY: 'today',\r\n  CALENDAR: 'calendar',\r\n};\r\n\r\nconst TasksScreen = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isNewTaskScreenVisible, setNewTaskScreenVisible] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [viewMode, setViewMode] = useState(VIEW_MODES.TODAY);\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => fetchTasksAndDates(selectedDate, setTasks);\r\n\r\n    fetchData();\r\n    const handleTaskUpdate = () => fetchData();\r\n    taskEventEmitter.on('taskUpdated', handleTaskUpdate);\r\n    return () => taskEventEmitter.off('taskUpdated', handleTaskUpdate);\r\n  }, [selectedDate]);\r\n\r\n  const handleViewModeToggle = useCallback(() => {\r\n    setViewMode(prevMode => prevMode === VIEW_MODES.TODAY ? VIEW_MODES.CALENDAR : VIEW_MODES.TODAY);\r\n  }, []);\r\n\r\n  const calendarComponent = useMemo(() => {\r\n    const CalendarComponent = viewMode === VIEW_MODES.TODAY ? CustomCalendar : VerticalCalendar;\r\n    return (\r\n      <CalendarComponent selectedDate={selectedDate} onDateChange={setSelectedDate} tasks={tasks} />\r\n    );\r\n  }, [viewMode, selectedDate, tasks]);\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.contentContainer}>\r\n        <View style={styles.taskHeader}>\r\n          <Text style={styles.titleMedium}>\r\n            {viewMode === VIEW_MODES.TODAY ? \r\n              (isToday(selectedDate) ? 'Сегодня' : format(selectedDate, 'd MMMM', { locale: ru })) : \r\n              'Календарь'}\r\n          </Text>\r\n          <View style={styles.calendarBlock}>\r\n            {viewMode === VIEW_MODES.TODAY && <Text style={styles.title}>{format(selectedDate, 'MMMM, yyyy', { locale: ru })}</Text>}\r\n            <TouchableOpacity onPress={handleViewModeToggle}>\r\n              {viewMode === VIEW_MODES.TODAY ? <CalendarIcon /> : <TodayIcon />}\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n        {calendarComponent}\r\n        {viewMode === VIEW_MODES.TODAY && <AddButton onPress={() => setNewTaskScreenVisible(true)} />}\r\n      </View>\r\n      <Modal visible={isNewTaskScreenVisible} onRequestClose={() => setNewTaskScreenVisible(false)}>\r\n        <NewTaskScreen onClose={() => setNewTaskScreenVisible(false)} />\r\n      </Modal>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default TasksScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAEzE,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,EAAE,QAAQ,iBAAiB;AACpC,OAAOC,MAAM;AACb,SAASC,YAAY,EAAEC,SAAS;AAChC,OAAOC,SAAS;AAChB,OAAOC,cAAc;AACrB,OAAOC,gBAAgB;AACvB,OAAOC,aAAa;AACpB,SAASC,OAAO,EAAEC,kBAAkB;AACpC,SAASC,gBAAgB;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE7C,IAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE;AACZ,CAAC;AAED,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EACxB,IAAAC,SAAA,GAA0B7B,QAAQ,CAAC,EAAE,CAAC;IAAA8B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAA0DlC,QAAQ,CAAC,KAAK,CAAC;IAAAmC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAlEE,sBAAsB,GAAAD,UAAA;IAAEE,uBAAuB,GAAAF,UAAA;EACtD,IAAAG,UAAA,GAAwCtC,QAAQ,CAAC,IAAIuC,IAAI,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAT,cAAA,CAAAO,UAAA;IAArDG,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAgC3C,QAAQ,CAACyB,UAAU,CAACC,KAAK,CAAC;IAAAkB,UAAA,GAAAb,cAAA,CAAAY,UAAA;IAAnDE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B3C,SAAS,CAAC,YAAM;IACd,IAAM8C,SAAS,GAAG,SAAZA,SAASA,CAAA;MAAA,OAAS5B,kBAAkB,CAACsB,YAAY,EAAER,QAAQ,CAAC;IAAA;IAElEc,SAAS,CAAC,CAAC;IACX,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA;MAAA,OAASD,SAAS,CAAC,CAAC;IAAA;IAC1C3B,gBAAgB,CAAC6B,EAAE,CAAC,aAAa,EAAED,gBAAgB,CAAC;IACpD,OAAO;MAAA,OAAM5B,gBAAgB,CAAC8B,GAAG,CAAC,aAAa,EAAEF,gBAAgB,CAAC;IAAA;EACpE,CAAC,EAAE,CAACP,YAAY,CAAC,CAAC;EAElB,IAAMU,oBAAoB,GAAGjD,WAAW,CAAC,YAAM;IAC7C4C,WAAW,CAAC,UAAAM,QAAQ;MAAA,OAAIA,QAAQ,KAAK3B,UAAU,CAACC,KAAK,GAAGD,UAAU,CAACE,QAAQ,GAAGF,UAAU,CAACC,KAAK;IAAA,EAAC;EACjG,CAAC,EAAE,EAAE,CAAC;EAEN,IAAM2B,iBAAiB,GAAGlD,OAAO,CAAC,YAAM;IACtC,IAAMmD,iBAAiB,GAAGT,QAAQ,KAAKpB,UAAU,CAACC,KAAK,GAAGX,cAAc,GAAGC,gBAAgB;IAC3F,OACEM,IAAA,CAACgC,iBAAiB;MAACb,YAAY,EAAEA,YAAa;MAACc,YAAY,EAAEb,eAAgB;MAACV,KAAK,EAAEA;IAAM,CAAE,CAAC;EAElG,CAAC,EAAE,CAACa,QAAQ,EAAEJ,YAAY,EAAET,KAAK,CAAC,CAAC;EAEnC,OACER,KAAA,CAAChB,YAAY;IAACgD,KAAK,EAAE7C,MAAM,CAAC8C,SAAU;IAAAC,QAAA,GACpClC,KAAA,CAACpB,IAAI;MAACoD,KAAK,EAAE7C,MAAM,CAACgD,gBAAiB;MAAAD,QAAA,GACnClC,KAAA,CAACpB,IAAI;QAACoD,KAAK,EAAE7C,MAAM,CAACiD,UAAW;QAAAF,QAAA,GAC7BpC,IAAA,CAACjB,IAAI;UAACmD,KAAK,EAAE7C,MAAM,CAACkD,WAAY;UAAAH,QAAA,EAC7Bb,QAAQ,KAAKpB,UAAU,CAACC,KAAK,GAC3BR,OAAO,CAACuB,YAAY,CAAC,GAAG,SAAS,GAAGhC,MAAM,CAACgC,YAAY,EAAE,QAAQ,EAAE;YAAEqB,MAAM,EAAEpD;UAAG,CAAC,CAAC,GACnF;QAAW,CACT,CAAC,EACPc,KAAA,CAACpB,IAAI;UAACoD,KAAK,EAAE7C,MAAM,CAACoD,aAAc;UAAAL,QAAA,GAC/Bb,QAAQ,KAAKpB,UAAU,CAACC,KAAK,IAAIJ,IAAA,CAACjB,IAAI;YAACmD,KAAK,EAAE7C,MAAM,CAACqD,KAAM;YAAAN,QAAA,EAAEjD,MAAM,CAACgC,YAAY,EAAE,YAAY,EAAE;cAAEqB,MAAM,EAAEpD;YAAG,CAAC;UAAC,CAAO,CAAC,EACxHY,IAAA,CAAChB,gBAAgB;YAAC2D,OAAO,EAAEd,oBAAqB;YAAAO,QAAA,EAC7Cb,QAAQ,KAAKpB,UAAU,CAACC,KAAK,GAAGJ,IAAA,CAACV,YAAY,IAAE,CAAC,GAAGU,IAAA,CAACT,SAAS,IAAE;UAAC,CACjD,CAAC;QAAA,CACf,CAAC;MAAA,CACH,CAAC,EACNwC,iBAAiB,EACjBR,QAAQ,KAAKpB,UAAU,CAACC,KAAK,IAAIJ,IAAA,CAACR,SAAS;QAACmD,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAM5B,uBAAuB,CAAC,IAAI,CAAC;QAAA;MAAC,CAAE,CAAC;IAAA,CACzF,CAAC,EACPf,IAAA,CAACf,KAAK;MAAC2D,OAAO,EAAE9B,sBAAuB;MAAC+B,cAAc,EAAE,SAAAA,eAAA;QAAA,OAAM9B,uBAAuB,CAAC,KAAK,CAAC;MAAA,CAAC;MAAAqB,QAAA,EAC3FpC,IAAA,CAACL,aAAa;QAACmD,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAM/B,uBAAuB,CAAC,KAAK,CAAC;QAAA;MAAC,CAAE;IAAC,CAC3D,CAAC;EAAA,CACI,CAAC;AAEnB,CAAC;AAED,eAAeT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}