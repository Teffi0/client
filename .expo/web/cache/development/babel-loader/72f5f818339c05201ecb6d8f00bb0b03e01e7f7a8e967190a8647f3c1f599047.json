{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { FollowIcon, ProfileIcon, LocationIcon } from \"../icons\";\nimport styles, { colors } from \"../styles/styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { formatTime, formatAddress } from \"../utils/utils\";\nimport { fetchServiceNamesByIds, fetchDraftData } from \"../utils/tasks\";\nimport NewTaskScreen from \"../screens/NewTaskScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar getStatusColor = function getStatusColor(status) {\n  switch (status) {\n    case 'новая':\n      return colors.newStatus;\n    case 'в процессе':\n      return colors.inProcessStatus;\n    case 'выполнено':\n      return colors.finishedStatus;\n    case 'черновик':\n      return colors.grey;\n    default:\n      return colors.grey;\n  }\n};\nvar TaskComponent = React.memo(function (props) {\n  var _useState = useState('Услуга не указана'),\n    _useState2 = _slicedToArray(_useState, 2),\n    serviceName = _useState2[0],\n    setServiceName = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isNewTaskScreenVisible = _useState4[0],\n    setNewTaskScreenVisible = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    draftData = _useState6[0],\n    setDraftData = _useState6[1];\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      var services = yield fetchServiceNamesByIds(props.service);\n      setServiceName(Object.values(services).join(', '));\n    })();\n  }, [props.service]);\n  useEffect(function () {\n    if (props.status === 'черновик') {\n      _asyncToGenerator(function* () {\n        var data = yield fetchDraftData(props.id);\n        setDraftData(data);\n      })();\n    }\n  }, [props.id, props.status]);\n  var statusColor = getStatusColor(props.status);\n  var navigation = useNavigation();\n  var handleTaskPress = function handleTaskPress() {\n    if (props.status === 'черновик' && draftData) {\n      setNewTaskScreenVisible(true);\n    } else {\n      navigation.navigate('TaskDetail', {\n        screen: 'TaskDetailScreen',\n        params: _objectSpread(_objectSpread({}, props), {}, {\n          serviceName: serviceName\n        })\n      });\n    }\n  };\n  var formattedStartTime = props.start_time ? formatTime(props.start_time) : 'Не указано';\n  var formattedEndTime = props.end_time ? formatTime(props.end_time) : 'Не указано';\n  var addressText = props.address_client ? formatAddress(props.address_client) : 'Адрес не указан';\n  var employeesText = props.employees ? `${props.employees} участник${props.employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: handleTaskPress,\n      accessibilityLabel: `Task ${serviceName}`,\n      children: _jsxs(View, {\n        style: [styles.task, {\n          borderColor: statusColor\n        }],\n        children: [_jsxs(View, {\n          style: styles.taskHeader,\n          children: [_jsxs(View, {\n            style: styles.taskHeaderLeft,\n            children: [_jsx(Text, {\n              style: styles.taskTime,\n              children: formattedStartTime\n            }), _jsxs(Text, {\n              style: styles.taskTime,\n              children: [\" - \", formattedEndTime]\n            })]\n          }), _jsx(View, {\n            style: styles.taskHeaderRight,\n            children: _jsx(View, {\n              style: [styles.taskStatus, {\n                backgroundColor: statusColor\n              }],\n              children: _jsx(Text, {\n                style: styles.taskStatusText,\n                children: props.status\n              })\n            })\n          })]\n        }), _jsxs(View, {\n          style: styles.taskContent,\n          children: [_jsx(Text, {\n            style: styles.taskTitle,\n            children: serviceName\n          }), _jsx(FollowIcon, {\n            style: styles.taskStatusIcon\n          })]\n        }), _jsxs(View, {\n          style: styles.taskFooter,\n          children: [_jsxs(View, {\n            style: styles.taskFooterBlock,\n            children: [_jsx(ProfileIcon, {}), _jsx(Text, {\n              style: styles.taskFooterText,\n              children: employeesText\n            })]\n          }), _jsxs(View, {\n            style: styles.taskFooterBlock,\n            children: [_jsx(LocationIcon, {}), _jsx(Text, {\n              style: styles.taskFooterText,\n              children: addressText\n            })]\n          })]\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: isNewTaskScreenVisible,\n      animationType: \"slide\",\n      onRequestClose: function onRequestClose() {\n        return setNewTaskScreenVisible(false);\n      },\n      children: _jsx(NewTaskScreen, {\n        onClose: function onClose() {\n          return setNewTaskScreenVisible(false);\n        },\n        draftData: draftData\n      })\n    })]\n  });\n});\nexport default TaskComponent;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableOpacity","Modal","FollowIcon","ProfileIcon","LocationIcon","styles","colors","useNavigation","formatTime","formatAddress","fetchServiceNamesByIds","fetchDraftData","NewTaskScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","getStatusColor","status","newStatus","inProcessStatus","finishedStatus","grey","TaskComponent","memo","props","_useState","_useState2","_slicedToArray","serviceName","setServiceName","_useState3","_useState4","isNewTaskScreenVisible","setNewTaskScreenVisible","_useState5","_useState6","draftData","setDraftData","_asyncToGenerator","services","service","Object","values","join","data","id","statusColor","navigation","handleTaskPress","navigate","screen","params","_objectSpread","formattedStartTime","start_time","formattedEndTime","end_time","addressText","address_client","employeesText","employees","children","onPress","accessibilityLabel","style","task","borderColor","taskHeader","taskHeaderLeft","taskTime","taskHeaderRight","taskStatus","backgroundColor","taskStatusText","taskContent","taskTitle","taskStatusIcon","taskFooter","taskFooterBlock","taskFooterText","visible","animationType","onRequestClose","onClose"],"sources":["C:/Users/fred/Desktop/client/src/components/TaskComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport { FollowIcon, ProfileIcon, LocationIcon } from '../icons';\r\nimport styles, { colors } from '../styles/styles';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { formatTime, formatAddress } from '../utils/utils'; // Импорт функций из utils.js\r\nimport { fetchServiceNamesByIds, fetchDraftData } from '../utils/tasks';\r\nimport NewTaskScreen from '../screens/NewTaskScreen';\r\n\r\nconst getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'новая':\r\n      return colors.newStatus;\r\n    case 'в процессе':\r\n      return colors.inProcessStatus;\r\n    case 'выполнено':\r\n      return colors.finishedStatus;\r\n    case 'черновик':\r\n      return colors.grey;\r\n    default:\r\n      return colors.grey; // Цвет по умолчанию\r\n  }\r\n};\r\n\r\nconst TaskComponent = React.memo((props) => {\r\n  const [serviceName, setServiceName] = useState('Услуга не указана');\r\n  const [isNewTaskScreenVisible, setNewTaskScreenVisible] = useState(false);\r\n  const [draftData, setDraftData] = useState(null); // Состояние для хранения данных черновика\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const services = await fetchServiceNamesByIds(props.service);\r\n      setServiceName(Object.values(services).join(', '));\r\n    })();\r\n  }, [props.service]);\r\n\r\n  useEffect(() => {\r\n    if (props.status === 'черновик') {\r\n      // Асинхронно загружаем данные черновика и сохраняем их в состоянии\r\n      (async () => {\r\n        const data = await fetchDraftData(props.id);\r\n        setDraftData(data);\r\n      })();\r\n    }\r\n  }, [props.id, props.status]);\r\n\r\n  const statusColor = getStatusColor(props.status);\r\n  const navigation = useNavigation();\r\n\r\n  const handleTaskPress = () => {\r\n    if (props.status === 'черновик' && draftData) {\r\n      setNewTaskScreenVisible(true); \r\n    } else {\r\n      navigation.navigate('TaskDetail', {\r\n        screen: 'TaskDetailScreen',\r\n        params: { ...props, serviceName },\r\n      });\r\n    }\r\n  };\r\n\r\n  const formattedStartTime = props.start_time ? formatTime(props.start_time) : 'Не указано';\r\n  const formattedEndTime = props.end_time ? formatTime(props.end_time) : 'Не указано';\r\n  const addressText = props.address_client ? formatAddress(props.address_client) : 'Адрес не указан';\r\n  const employeesText = props.employees ? `${props.employees} участник${props.employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity onPress={handleTaskPress} accessibilityLabel={`Task ${serviceName}`}>\r\n        <View style={[styles.task, { borderColor: statusColor }]}>\r\n          <View style={styles.taskHeader}>\r\n            <View style={styles.taskHeaderLeft}>\r\n              <Text style={styles.taskTime}>{formattedStartTime}</Text>\r\n              <Text style={styles.taskTime}> - {formattedEndTime}</Text>\r\n            </View>\r\n            <View style={styles.taskHeaderRight}>\r\n              <View style={[styles.taskStatus, { backgroundColor: statusColor }]}>\r\n                <Text style={styles.taskStatusText}>{props.status}</Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View style={styles.taskContent}>\r\n            <Text style={styles.taskTitle}>{serviceName}</Text>\r\n            <FollowIcon style={styles.taskStatusIcon} />\r\n          </View>\r\n          <View style={styles.taskFooter}>\r\n            <View style={styles.taskFooterBlock}>\r\n              <ProfileIcon />\r\n              <Text style={styles.taskFooterText}>{employeesText}</Text>\r\n            </View>\r\n            <View style={styles.taskFooterBlock}>\r\n              <LocationIcon />\r\n              <Text style={styles.taskFooterText}>{addressText}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n      <Modal\r\n        visible={isNewTaskScreenVisible}\r\n        animationType=\"slide\"\r\n        onRequestClose={() => setNewTaskScreenVisible(false)}\r\n      >\r\n        <NewTaskScreen onClose={() => setNewTaskScreenVisible(false)} draftData={draftData} />\r\n      </Modal>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TaskComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}