{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { FollowIcon, ProfileIcon, LocationIcon } from \"../icons\";\nimport styles from \"../styles/styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { formatTime, formatAddress } from \"../utils/utils\";\nimport { fetchServiceNamesByIds, fetchDraftData } from \"../utils/tasks\";\nimport NewTaskScreen from \"../screens/NewTaskScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar getStatusColor = function getStatusColor(status) {\n  return {\n    'новая': styles.newStatus,\n    'в процессе': styles.inProcessStatus,\n    'выполнено': styles.finishedStatus,\n    'черновик': styles.grey\n  }[status] || styles.grey;\n};\nvar TaskComponent = function TaskComponent(_ref) {\n  var status = _ref.status,\n    start_time = _ref.start_time,\n    end_time = _ref.end_time,\n    service = _ref.service,\n    address_client = _ref.address_client,\n    employees = _ref.employees,\n    id = _ref.id;\n  var _useState = useState('Услуга не указана'),\n    _useState2 = _slicedToArray(_useState, 2),\n    serviceName = _useState2[0],\n    setServiceName = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isNewTaskScreenVisible = _useState4[0],\n    setNewTaskScreenVisible = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    draftData = _useState6[0],\n    setDraftData = _useState6[1];\n  useEffect(function () {\n    if (service) {\n      _asyncToGenerator(function* () {\n        var services = yield fetchServiceNamesByIds(service);\n        setServiceName(Object.values(services).join(', '));\n      })();\n    }\n  }, [service]);\n  useEffect(function () {\n    if (status === 'черновик') {\n      _asyncToGenerator(function* () {\n        var data = yield fetchDraftData(id);\n        setDraftData(data);\n      })();\n    }\n  }, [id, status]);\n  var navigation = useNavigation();\n  var statusColor = getStatusColor(status);\n  var handleTaskPress = useCallback(function () {\n    if (status === 'черновик' && draftData) {\n      setNewTaskScreenVisible(true);\n    } else {\n      navigation.navigate('TaskDetail', {\n        screen: 'TaskDetailScreen',\n        params: {\n          status: status,\n          start_time: start_time,\n          end_time: end_time,\n          service: service,\n          address_client: address_client,\n          employees: employees,\n          id: id,\n          serviceName: serviceName\n        }\n      });\n    }\n  }, [status, draftData, navigation, start_time, end_time, service, address_client, employees, id, serviceName]);\n  var formattedStartTime = useMemo(function () {\n    return formatTime(start_time) || 'Не указано';\n  }, [start_time]);\n  var formattedEndTime = useMemo(function () {\n    return formatTime(end_time) || 'Не указано';\n  }, [end_time]);\n  var addressText = useMemo(function () {\n    return formatAddress(address_client) || 'Адрес не указан';\n  }, [address_client]);\n  var employeesText = useMemo(function () {\n    return employees ? `${employees} участник${employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\n  }, [employees]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: handleTaskPress,\n      accessibilityLabel: `Task ${serviceName}`,\n      children: _jsxs(View, {\n        style: [styles.task, {\n          borderColor: statusColor\n        }],\n        children: [_jsxs(View, {\n          style: styles.taskHeader,\n          children: [_jsxs(View, {\n            style: styles.taskHeaderLeft,\n            children: [_jsx(Text, {\n              style: styles.taskTime,\n              children: formattedStartTime\n            }), _jsxs(Text, {\n              style: styles.taskTime,\n              children: [\" - \", formattedEndTime]\n            })]\n          }), _jsx(View, {\n            style: styles.taskHeaderRight,\n            children: _jsx(View, {\n              style: [styles.taskStatus, {\n                backgroundColor: statusColor\n              }],\n              children: _jsx(Text, {\n                style: styles.taskStatusText,\n                children: status\n              })\n            })\n          })]\n        }), _jsxs(View, {\n          style: styles.taskContent,\n          children: [_jsx(Text, {\n            style: styles.taskTitle,\n            children: serviceName\n          }), _jsx(FollowIcon, {\n            style: styles.taskStatusIcon\n          })]\n        }), _jsxs(View, {\n          style: styles.taskFooter,\n          children: [_jsxs(View, {\n            style: styles.taskFooterBlock,\n            children: [_jsx(ProfileIcon, {}), _jsx(Text, {\n              style: styles.taskFooterText,\n              children: employeesText\n            })]\n          }), _jsxs(View, {\n            style: styles.taskFooterBlock,\n            children: [_jsx(LocationIcon, {}), _jsx(Text, {\n              style: styles.taskFooterText,\n              children: addressText\n            })]\n          })]\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: isNewTaskScreenVisible,\n      animationType: \"slide\",\n      onRequestClose: function onRequestClose() {\n        return setNewTaskScreenVisible(false);\n      },\n      children: _jsx(NewTaskScreen, {\n        onClose: function onClose() {\n          return setNewTaskScreenVisible(false);\n        },\n        draftData: draftData\n      })\n    })]\n  });\n};\nexport default React.memo(TaskComponent);","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","View","Text","TouchableOpacity","Modal","FollowIcon","ProfileIcon","LocationIcon","styles","useNavigation","formatTime","formatAddress","fetchServiceNamesByIds","fetchDraftData","NewTaskScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","getStatusColor","status","newStatus","inProcessStatus","finishedStatus","grey","TaskComponent","_ref","start_time","end_time","service","address_client","employees","id","_useState","_useState2","_slicedToArray","serviceName","setServiceName","_useState3","_useState4","isNewTaskScreenVisible","setNewTaskScreenVisible","_useState5","_useState6","draftData","setDraftData","_asyncToGenerator","services","Object","values","join","data","navigation","statusColor","handleTaskPress","navigate","screen","params","formattedStartTime","formattedEndTime","addressText","employeesText","children","onPress","accessibilityLabel","style","task","borderColor","taskHeader","taskHeaderLeft","taskTime","taskHeaderRight","taskStatus","backgroundColor","taskStatusText","taskContent","taskTitle","taskStatusIcon","taskFooter","taskFooterBlock","taskFooterText","visible","animationType","onRequestClose","onClose","memo"],"sources":["C:/Users/fred/Desktop/client/src/components/TaskComponent.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport { FollowIcon, ProfileIcon, LocationIcon } from '../icons';\r\nimport styles from '../styles/styles';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { formatTime, formatAddress } from '../utils/utils';\r\nimport { fetchServiceNamesByIds, fetchDraftData } from '../utils/tasks';\r\nimport NewTaskScreen from '../screens/NewTaskScreen';\r\n\r\nconst getStatusColor = (status) => ({\r\n  'новая': styles.newStatus,\r\n  'в процессе': styles.inProcessStatus,\r\n  'выполнено': styles.finishedStatus,\r\n  'черновик': styles.grey\r\n}[status] || styles.grey);\r\n\r\nconst TaskComponent = ({ status, start_time, end_time, service, address_client, employees, id }) => {\r\n  const [serviceName, setServiceName] = useState('Услуга не указана');\r\n  const [isNewTaskScreenVisible, setNewTaskScreenVisible] = useState(false);\r\n  const [draftData, setDraftData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (service) {\r\n      (async () => {\r\n        const services = await fetchServiceNamesByIds(service);\r\n        setServiceName(Object.values(services).join(', '));\r\n      })();\r\n    }\r\n  }, [service]);\r\n\r\n  useEffect(() => {\r\n    if (status === 'черновик') {\r\n      (async () => {\r\n        const data = await fetchDraftData(id);\r\n        setDraftData(data);\r\n      })();\r\n    }\r\n  }, [id, status]);\r\n\r\n  const navigation = useNavigation();\r\n  const statusColor = getStatusColor(status);\r\n\r\n  const handleTaskPress = useCallback(() => {\r\n    if (status === 'черновик' && draftData) {\r\n      setNewTaskScreenVisible(true);\r\n    } else {\r\n      navigation.navigate('TaskDetail', {\r\n        screen: 'TaskDetailScreen',\r\n        params: { status, start_time, end_time, service, address_client, employees, id, serviceName },\r\n      });\r\n    }\r\n  }, [status, draftData, navigation, start_time, end_time, service, address_client, employees, id, serviceName]);\r\n\r\n  const formattedStartTime = useMemo(() => formatTime(start_time) || 'Не указано', [start_time]);\r\n  const formattedEndTime = useMemo(() => formatTime(end_time) || 'Не указано', [end_time]);\r\n  const addressText = useMemo(() => formatAddress(address_client) || 'Адрес не указан', [address_client]);\r\n  const employeesText = useMemo(() => employees ? `${employees} участник${employees > 1 ? 'ов' : ''}` : 'Участники не указаны', [employees]);\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity onPress={handleTaskPress} accessibilityLabel={`Task ${serviceName}`}>\r\n        <View style={[styles.task, { borderColor: statusColor }]}>\r\n          <View style={styles.taskHeader}>\r\n            <View style={styles.taskHeaderLeft}>\r\n              <Text style={styles.taskTime}>{formattedStartTime}</Text>\r\n              <Text style={styles.taskTime}> - {formattedEndTime}</Text>\r\n            </View>\r\n            <View style={styles.taskHeaderRight}>\r\n              <View style={[styles.taskStatus, { backgroundColor: statusColor }]}>\r\n                <Text style={styles.taskStatusText}>{status}</Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View style={styles.taskContent}>\r\n            <Text style={styles.taskTitle}>{serviceName}</Text>\r\n            <FollowIcon style={styles.taskStatusIcon} />\r\n          </View>\r\n          <View style={styles.taskFooter}>\r\n            <View style={styles.taskFooterBlock}>\r\n              <ProfileIcon />\r\n              <Text style={styles.taskFooterText}>{employeesText}</Text>\r\n            </View>\r\n            <View style={styles.taskFooterBlock}>\r\n              <LocationIcon />\r\n              <Text style={styles.taskFooterText}>{addressText}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n      <Modal\r\n        visible={isNewTaskScreenVisible}\r\n        animationType=\"slide\"\r\n        onRequestClose={() => setNewTaskScreenVisible(false)}\r\n      >\r\n        <NewTaskScreen onClose={() => setNewTaskScreenVisible(false)} draftData={draftData} />\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(TaskComponent);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}