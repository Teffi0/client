{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { FollowIcon, ProfileIcon, LocationIcon } from \"../icons\";\nimport styles, { colors } from \"../styles/styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { formatTime, formatAddress } from \"../utils/utils\";\nimport { fetchServiceNamesByIds, fetchDraftData } from \"../utils/tasks\";\nimport NewTaskScreen from \"../screens/NewTaskScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar getStatusColor = function getStatusColor(status) {\n  return colors[status] || colors.grey;\n};\nvar TaskComponent = React.memo(function (_ref) {\n  var status = _ref.status,\n    start_time = _ref.start_time,\n    end_time = _ref.end_time,\n    service = _ref.service,\n    address_client = _ref.address_client,\n    employees = _ref.employees,\n    id = _ref.id;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    serviceName = _useState2[0],\n    setServiceName = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isNewTaskScreenVisible = _useState4[0],\n    setNewTaskScreenVisible = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    draftData = _useState6[0],\n    setDraftData = _useState6[1];\n  var navigation = useNavigation();\n  useEffect(function () {\n    if (service) {\n      _asyncToGenerator(function* () {\n        var services = yield fetchServiceNamesByIds(service);\n        setServiceName(Object.values(services).join(', '));\n      })();\n    }\n    if (status === 'черновик') {\n      _asyncToGenerator(function* () {\n        var data = yield fetchDraftData(id);\n        setDraftData(data);\n      })();\n    }\n  }, [service, id, status]);\n  var handleTaskPress = useCallback(function () {\n    if (status === 'черновик' && draftData) {\n      setNewTaskScreenVisible(true);\n    } else {\n      navigation.navigate('TaskDetail', {\n        screen: 'TaskDetailScreen',\n        params: {\n          status: status,\n          start_time: start_time,\n          end_time: end_time,\n          service: service,\n          address_client: address_client,\n          employees: employees,\n          id: id,\n          serviceName: serviceName\n        }\n      });\n    }\n  }, [status, draftData, navigation, serviceName, start_time, end_time, service, address_client, employees, id]);\n  var statusColor = getStatusColor(status);\n  var formattedStartTime = start_time ? formatTime(start_time) : 'Не указано';\n  var formattedEndTime = end_time ? formatTime(end_time) : 'Не указано';\n  var addressText = address_client ? formatAddress(address_client) : 'Адрес не указан';\n  var employeesText = employees ? `${employees} участник${employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: handleTaskPress,\n      accessibilityLabel: `Task ${serviceName}`,\n      children: _jsxs(View, {\n        style: [styles.task, {\n          borderColor: statusColor\n        }],\n        children: [_jsxs(View, {\n          style: styles.taskHeader,\n          children: [_jsxs(View, {\n            style: styles.taskHeaderLeft,\n            children: [_jsx(Text, {\n              style: styles.taskTime,\n              children: formattedStartTime\n            }), _jsxs(Text, {\n              style: styles.taskTime,\n              children: [\" - \", formattedEndTime]\n            })]\n          }), _jsx(View, {\n            style: styles.taskHeaderRight,\n            children: _jsx(View, {\n              style: [styles.taskStatus, {\n                backgroundColor: statusColor\n              }],\n              children: _jsx(Text, {\n                style: styles.taskStatusText,\n                children: props.status\n              })\n            })\n          })]\n        }), _jsxs(View, {\n          style: styles.taskContent,\n          children: [_jsx(Text, {\n            style: styles.taskTitle,\n            children: serviceName\n          }), _jsx(FollowIcon, {\n            style: styles.taskStatusIcon\n          })]\n        }), _jsxs(View, {\n          style: styles.taskFooter,\n          children: [_jsxs(View, {\n            style: styles.taskFooterBlock,\n            children: [_jsx(ProfileIcon, {}), _jsx(Text, {\n              style: styles.taskFooterText,\n              children: employeesText\n            })]\n          }), _jsxs(View, {\n            style: styles.taskFooterBlock,\n            children: [_jsx(LocationIcon, {}), _jsx(Text, {\n              style: styles.taskFooterText,\n              children: addressText\n            })]\n          })]\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: isNewTaskScreenVisible,\n      animationType: \"slide\",\n      onRequestClose: function onRequestClose() {\n        return setNewTaskScreenVisible(false);\n      },\n      children: _jsx(NewTaskScreen, {\n        onClose: function onClose() {\n          return setNewTaskScreenVisible(false);\n        },\n        draftData: draftData\n      })\n    })]\n  });\n});\nexport default TaskComponent;","map":{"version":3,"names":["React","useState","useEffect","useCallback","View","Text","TouchableOpacity","Modal","FollowIcon","ProfileIcon","LocationIcon","styles","colors","useNavigation","formatTime","formatAddress","fetchServiceNamesByIds","fetchDraftData","NewTaskScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","getStatusColor","status","grey","TaskComponent","memo","_ref","start_time","end_time","service","address_client","employees","id","_useState","_useState2","_slicedToArray","serviceName","setServiceName","_useState3","_useState4","isNewTaskScreenVisible","setNewTaskScreenVisible","_useState5","_useState6","draftData","setDraftData","navigation","_asyncToGenerator","services","Object","values","join","data","handleTaskPress","navigate","screen","params","statusColor","formattedStartTime","formattedEndTime","addressText","employeesText","children","onPress","accessibilityLabel","style","task","borderColor","taskHeader","taskHeaderLeft","taskTime","taskHeaderRight","taskStatus","backgroundColor","taskStatusText","props","taskContent","taskTitle","taskStatusIcon","taskFooter","taskFooterBlock","taskFooterText","visible","animationType","onRequestClose","onClose"],"sources":["C:/Users/fred/Desktop/client/src/components/TaskComponent.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport { FollowIcon, ProfileIcon, LocationIcon } from '../icons';\r\nimport styles, { colors } from '../styles/styles';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { formatTime, formatAddress } from '../utils/utils';\r\nimport { fetchServiceNamesByIds, fetchDraftData } from '../utils/tasks';\r\nimport NewTaskScreen from '../screens/NewTaskScreen';\r\n\r\nconst getStatusColor = (status) => colors[status] || colors.grey;\r\n\r\nconst TaskComponent = React.memo(({ status, start_time, end_time, service, address_client, employees, id }) => {\r\n  const [serviceName, setServiceName] = useState('');\r\n  const [isNewTaskScreenVisible, setNewTaskScreenVisible] = useState(false);\r\n  const [draftData, setDraftData] = useState(null);\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    if (service) {\r\n      (async () => {\r\n        const services = await fetchServiceNamesByIds(service);\r\n        setServiceName(Object.values(services).join(', '));\r\n      })();\r\n    }\r\n    if (status === 'черновик') {\r\n      (async () => {\r\n        const data = await fetchDraftData(id);\r\n        setDraftData(data);\r\n      })();\r\n    }\r\n  }, [service, id, status]);\r\n\r\n  const handleTaskPress = useCallback(() => {\r\n    if (status === 'черновик' && draftData) {\r\n      setNewTaskScreenVisible(true); \r\n    } else {\r\n      navigation.navigate('TaskDetail', {\r\n        screen: 'TaskDetailScreen',\r\n        params: { status, start_time, end_time, service, address_client, employees, id, serviceName },\r\n      });\r\n    }\r\n  }, [status, draftData, navigation, serviceName, start_time, end_time, service, address_client, employees, id]);\r\n\r\n  const statusColor = getStatusColor(status);\r\n  const formattedStartTime = start_time ? formatTime(start_time) : 'Не указано';\r\n  const formattedEndTime = end_time ? formatTime(end_time) : 'Не указано';\r\n  const addressText = address_client ? formatAddress(address_client) : 'Адрес не указан';\r\n  const employeesText = employees ? `${employees} участник${employees > 1 ? 'ов' : ''}` : 'Участники не указаны';\r\n\r\n  return (\r\n    <>\r\n      <TouchableOpacity onPress={handleTaskPress} accessibilityLabel={`Task ${serviceName}`}>\r\n        <View style={[styles.task, { borderColor: statusColor }]}>\r\n          <View style={styles.taskHeader}>\r\n            <View style={styles.taskHeaderLeft}>\r\n              <Text style={styles.taskTime}>{formattedStartTime}</Text>\r\n              <Text style={styles.taskTime}> - {formattedEndTime}</Text>\r\n            </View>\r\n            <View style={styles.taskHeaderRight}>\r\n              <View style={[styles.taskStatus, { backgroundColor: statusColor }]}>\r\n                <Text style={styles.taskStatusText}>{props.status}</Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View style={styles.taskContent}>\r\n            <Text style={styles.taskTitle}>{serviceName}</Text>\r\n            <FollowIcon style={styles.taskStatusIcon} />\r\n          </View>\r\n          <View style={styles.taskFooter}>\r\n            <View style={styles.taskFooterBlock}>\r\n              <ProfileIcon />\r\n              <Text style={styles.taskFooterText}>{employeesText}</Text>\r\n            </View>\r\n            <View style={styles.taskFooterBlock}>\r\n              <LocationIcon />\r\n              <Text style={styles.taskFooterText}>{addressText}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n      <Modal\r\n        visible={isNewTaskScreenVisible}\r\n        animationType=\"slide\"\r\n        onRequestClose={() => setNewTaskScreenVisible(false)}\r\n      >\r\n        <NewTaskScreen onClose={() => setNewTaskScreenVisible(false)} draftData={draftData} />\r\n      </Modal>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TaskComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}