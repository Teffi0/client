{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport axios from 'axios';\nimport { formatISO, parseISO, isBefore, format } from 'date-fns';\nimport styles from \"../styles/styles\";\nimport { SERVER_URL } from \"../utils/tasks\";\nimport { taskEventEmitter } from \"../Events\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function updateTaskStatus(_x, _x2) {\n  return _updateTaskStatus.apply(this, arguments);\n}\nfunction _updateTaskStatus() {\n  _updateTaskStatus = _asyncToGenerator(function* (taskId, taskData) {\n    try {\n      var response = yield fetch(`http://31.129.101.174/tasks/${taskId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      });\n      taskEventEmitter.emit('taskUpdated');\n      return response;\n    } catch (error) {\n      console.error('Ошибка при обновлении задачи:', error);\n      throw error;\n    }\n  });\n  return _updateTaskStatus.apply(this, arguments);\n}\nexport var validateFormData = function validateFormData(formData) {\n  var requiredFields = ['selectedService', 'paymentMethod', 'cost', 'startDate', 'endDate', 'startDateTime', 'endDateTime', 'selectedEmployee', 'selectedResponsible', 'fullnameClient'];\n  for (var field of requiredFields) {\n    if (!formData[field] || Array.isArray(formData[field]) && formData[field].length === 0) {\n      alert(`Пожалуйста, заполните поле ${field}.`);\n      return false;\n    }\n  }\n  if (isBefore(parseISO(formData.endDate), parseISO(formData.startDate))) {\n    alert('Дата окончания должна быть позже даты начала.');\n    return false;\n  }\n  return true;\n};\nvar formatTaskData = function formatTaskData(formData) {\n  var taskData = {\n    status: formData.status,\n    service: formData.service,\n    payment: formData.paymentMethod,\n    cost: formData.cost,\n    start_date: formData.startDate ? format(new Date(formData.startDate), 'yyyy-MM-dd') : null,\n    end_date: formData.endDate ? format(formData.endDate, 'yyyy-MM-dd') : null,\n    start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : null,\n    end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : null,\n    responsible: formData.selectedResponsible,\n    employees: formData.selectedEmployee,\n    fullname_client: formData.fullnameClient,\n    address_client: formData.addressClient,\n    phone: formData.phoneClient,\n    description: formData.description\n  };\n  Object.keys(taskData).forEach(function (key) {\n    return taskData[key] === null && delete taskData[key];\n  });\n  return taskData;\n};\nexport var fetchOptions = function () {\n  var _ref = _asyncToGenerator(function* (dispatchFormData) {\n    try {\n      var _yield$Promise$all = yield Promise.all([axios.get('http://31.129.101.174/services'), axios.get('http://31.129.101.174/paymentmethods'), axios.get('http://31.129.101.174/employees'), axios.get('http://31.129.101.174/responsibles'), axios.get('http://31.129.101.174/clients')]),\n        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5),\n        servicesResponse = _yield$Promise$all2[0],\n        paymentMethodsResponse = _yield$Promise$all2[1],\n        employeesResponse = _yield$Promise$all2[2],\n        responsiblesResponse = _yield$Promise$all2[3],\n        clientsResponse = _yield$Promise$all2[4];\n      dispatchFormData({\n        type: 'UPDATE_FORM',\n        payload: {\n          serviceOptions: servicesResponse.data,\n          paymentMethodOptions: paymentMethodsResponse.data,\n          responsibleOptions: responsiblesResponse.data,\n          employeesOptions: employeesResponse.data,\n          fullnameClientOptions: clientsResponse.data.map(function (client) {\n            return client.full_name;\n          })\n        }\n      });\n    } catch (error) {\n      console.error('Ошибка при получении данных:', error);\n    }\n  });\n  return function fetchOptions(_x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var handleSaveTask = function () {\n  var _ref2 = _asyncToGenerator(function* (formData) {\n    if (formData.status !== 'черновик' && !validateFormData(formData)) {\n      return;\n    }\n    var serviceString = formData.selectedService.join(', ');\n    var formattedData = formatTaskData(_objectSpread(_objectSpread({}, formData), {}, {\n      service: serviceString\n    }));\n    var employees = formData.employeesOptions.map(function (employee) {\n      return employee.id;\n    });\n    formattedData.employees = employees;\n    formattedData.employees = formData.selectedEmployee;\n    try {\n      var taskId;\n      if (formData.id) {\n        taskId = formData.id;\n      } else {\n        var response = yield axios.post(`${SERVER_URL}/tasks`, formattedData);\n        taskId = response.data.task_id;\n      }\n      if (formData.selectedService && formData.selectedService.length > 0) {\n        yield axios.post(`${SERVER_URL}/tasks/${taskId}/services`, {\n          services: formData.selectedService\n        });\n        console.log('Услуги успешно добавлены к задаче');\n      }\n      if (formData.status === 'выполнено') {\n        var filteredInventory = formData.selectedInventory.filter(function (item) {\n          return item.quantity > 0;\n        });\n        var inventoryData = filteredInventory.map(function (item) {\n          return {\n            inventory_id: item.id,\n            quantity: item.quantity\n          };\n        });\n        yield axios.put(`${SERVER_URL}/tasks/${taskId}/inventory`, {\n          inventory: inventoryData\n        });\n        if (formData.selectedImages && formData.selectedImages.length > 0) {\n          var imagesFormData = new FormData();\n          formData.selectedImages.forEach(function (imageUri, index) {\n            imagesFormData.append('photos', {\n              name: `photo_${index}.jpg`,\n              type: 'image/jpeg',\n              uri: Platform.OS === 'android' ? imageUri : imageUri.replace('file://', '')\n            });\n          });\n          yield axios.post(`${SERVER_URL}/tasks/${taskId}/photos`, imagesFormData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          console.log('Изображения успешно загружены на сервер');\n        }\n      }\n      taskEventEmitter.emit('taskUpdated');\n    } catch (error) {\n      console.error('Ошибка при добавлении задачи:', error);\n    }\n  });\n  return function handleSaveTask(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updateDraft = function () {\n  var _ref3 = _asyncToGenerator(function* (draftId, formData) {\n    console.log('Отправляемые данные:', formData);\n    var dataToSend = {\n      status: formData.status,\n      service: formData.selectedService.join(', '),\n      payment: formData.paymentMethod,\n      cost: formData.cost,\n      start_date: formData.startDate ? format(formData.startDate, 'yyyy-MM-dd') : null,\n      start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : null,\n      end_date: formData.endDate ? format(formData.endDate, 'yyyy-MM-dd') : null,\n      end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : null,\n      responsible: formData.selectedResponsible,\n      fullname_client: formData.fullnameClient,\n      address_client: formData.addressClient,\n      phone: formData.phone,\n      description: formData.description,\n      employees: formData.selectedEmployee.join(','),\n      services: formData.selectedService\n    };\n    console.log('dataToSend данные:', dataToSend);\n    try {\n      var response = yield axios.put(`${SERVER_URL}/tasks/${draftId}`, dataToSend);\n      console.log('Черновик успешно обновлен. Данные ответа:', response.data);\n    } catch (error) {\n      console.error('Ошибка при обновлении черновика:', error);\n    }\n  });\n  return function updateDraft(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var SuccessModal = React.memo(function (_ref4) {\n  var isVisible = _ref4.isVisible,\n    onClose = _ref4.onClose;\n  if (!isVisible) return null;\n  return _jsx(Modal, {\n    visible: isVisible,\n    transparent: false,\n    animationType: \"slide\",\n    children: _jsxs(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 20,\n          marginBottom: 20\n        },\n        children: \"\\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430!\"\n      }), _jsx(TouchableOpacity, {\n        onPress: onClose,\n        style: {\n          backgroundColor: 'blue',\n          padding: 10,\n          borderRadius: 5\n        },\n        children: _jsx(Text, {\n          style: {\n            color: 'white'\n          },\n          children: \"\\u041E\\u0442\\u043B\\u0438\\u0447\\u043D\\u043E\"\n        })\n      })]\n    })\n  });\n});","map":{"version":3,"names":["React","View","Text","TouchableOpacity","Modal","axios","formatISO","parseISO","isBefore","format","styles","SERVER_URL","taskEventEmitter","jsx","_jsx","jsxs","_jsxs","updateTaskStatus","_x","_x2","_updateTaskStatus","apply","arguments","_asyncToGenerator","taskId","taskData","response","fetch","method","headers","body","JSON","stringify","emit","error","console","validateFormData","formData","requiredFields","field","Array","isArray","length","alert","endDate","startDate","formatTaskData","status","service","payment","paymentMethod","cost","start_date","Date","end_date","start_time","startDateTime","end_time","endDateTime","responsible","selectedResponsible","employees","selectedEmployee","fullname_client","fullnameClient","address_client","addressClient","phone","phoneClient","description","Object","keys","forEach","key","fetchOptions","_ref","dispatchFormData","_yield$Promise$all","Promise","all","get","_yield$Promise$all2","_slicedToArray","servicesResponse","paymentMethodsResponse","employeesResponse","responsiblesResponse","clientsResponse","type","payload","serviceOptions","data","paymentMethodOptions","responsibleOptions","employeesOptions","fullnameClientOptions","map","client","full_name","_x3","handleSaveTask","_ref2","serviceString","selectedService","join","formattedData","_objectSpread","employee","id","post","task_id","services","log","filteredInventory","selectedInventory","filter","item","quantity","inventoryData","inventory_id","put","inventory","selectedImages","imagesFormData","FormData","imageUri","index","append","name","uri","Platform","OS","replace","_x4","updateDraft","_ref3","draftId","dataToSend","_x5","_x6","SuccessModal","memo","_ref4","isVisible","onClose","visible","transparent","animationType","children","style","flex","justifyContent","alignItems","fontSize","marginBottom","onPress","backgroundColor","padding","borderRadius","color"],"sources":["C:/Users/fred/Desktop/crm/src/utils/taskScreenHelpers.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport axios from 'axios';\r\nimport { formatISO, parseISO, isBefore, format } from 'date-fns';\r\nimport styles from '../styles/styles';\r\nimport { SERVER_URL } from '../utils/tasks';\r\nimport { taskEventEmitter } from '../Events';\r\n\r\nexport async function updateTaskStatus(taskId, taskData) {\r\n    try {\r\n        const response = await fetch(`http://31.129.101.174/tasks/${taskId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(taskData), // Отправляем полный объект задачи\r\n        });\r\n        taskEventEmitter.emit('taskUpdated');\r\n        return response; // Возвращает объект ответа fetch\r\n    } catch (error) {\r\n        console.error('Ошибка при обновлении задачи:', error);\r\n        throw error; // В случае ошибки пробрасываем исключение\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const validateFormData = (formData) => {\r\n    const requiredFields = ['selectedService', 'paymentMethod', 'cost', 'startDate', 'endDate', 'startDateTime', 'endDateTime', 'selectedEmployee', 'selectedResponsible', 'fullnameClient'];\r\n    for (let field of requiredFields) {\r\n        if (!formData[field] || (Array.isArray(formData[field]) && formData[field].length === 0)) {\r\n            alert(`Пожалуйста, заполните поле ${field}.`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Проверка дат на корректность (дата окончания после даты начала)\r\n    if (isBefore(parseISO(formData.endDate), parseISO(formData.startDate))) {\r\n        alert('Дата окончания должна быть позже даты начала.');\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n\r\nconst formatTaskData = (formData) => {\r\n    const taskData = {\r\n        status: formData.status,\r\n        service: formData.service,\r\n        payment: formData.paymentMethod,\r\n        cost: formData.cost,\r\n        start_date: formData.startDate ? format(new Date(formData.startDate), 'yyyy-MM-dd') : null,\r\n        end_date: formData.endDate ? format(formData.endDate, 'yyyy-MM-dd') : null,\r\n        start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : null,\r\n        end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : null,\r\n        responsible: formData.selectedResponsible,\r\n        employees: formData.selectedEmployee,\r\n        fullname_client: formData.fullnameClient,\r\n        address_client: formData.addressClient,\r\n        phone: formData.phoneClient,\r\n        description: formData.description\r\n    };\r\n\r\n    Object.keys(taskData).forEach(key => taskData[key] === null && delete taskData[key]);\r\n\r\n    return taskData;\r\n};\r\n\r\nexport const fetchOptions = async (dispatchFormData) => {\r\n    try {\r\n        const [servicesResponse, paymentMethodsResponse, employeesResponse, responsiblesResponse, clientsResponse] = await Promise.all([\r\n            axios.get('http://31.129.101.174/services'),\r\n            axios.get('http://31.129.101.174/paymentmethods'),\r\n            axios.get('http://31.129.101.174/employees'),\r\n            axios.get('http://31.129.101.174/responsibles'),\r\n            axios.get('http://31.129.101.174/clients')\r\n        ]);\r\n        dispatchFormData({\r\n            type: 'UPDATE_FORM',\r\n            payload: {\r\n                serviceOptions: servicesResponse.data,\r\n                paymentMethodOptions: paymentMethodsResponse.data,\r\n                responsibleOptions: responsiblesResponse.data,\r\n                employeesOptions: employeesResponse.data,\r\n                fullnameClientOptions: clientsResponse.data.map(client => client.full_name)\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Ошибка при получении данных:', error);\r\n    }\r\n};\r\n\r\nexport const handleSaveTask = async (formData) => {\r\n    // Если статус не \"черновик\", проводим валидацию\r\n    if (formData.status !== 'черновик' && !validateFormData(formData)) {\r\n        return; // Если валидация не пройдена, прекращаем выполнение функции\r\n    }\r\n\r\n    const serviceString = formData.selectedService.join(', ');\r\n\r\n    const formattedData = formatTaskData({ ...formData, service: serviceString });\r\n\r\n    // Преобразуем данные сотрудников в массив ID\r\n    const employees = formData.employeesOptions.map(employee => employee.id);\r\n    formattedData.employees = employees;\r\n\r\n    // После изменения\r\n    formattedData.employees = formData.selectedEmployee;\r\n    try {\r\n        let taskId;\r\n        if (formData.id) {\r\n            taskId = formData.id;\r\n        } else {\r\n            // Если это новая задача, создаем ее и получаем новый id\r\n            const response = await axios.post(`${SERVER_URL}/tasks`, formattedData);\r\n            taskId = response.data.task_id;\r\n        }\r\n\r\n        // Добавление услуг к задаче, если они есть\r\n        if (formData.selectedService && formData.selectedService.length > 0) {\r\n            await axios.post(`${SERVER_URL}/tasks/${taskId}/services`, {\r\n                services: formData.selectedService\r\n            });\r\n            console.log('Услуги успешно добавлены к задаче');\r\n        }\r\n\r\n        if (formData.status === 'выполнено') {\r\n            // Фильтрация элементов с количеством, равным нулю\r\n            const filteredInventory = formData.selectedInventory.filter(item => item.quantity > 0);\r\n\r\n            // Формирование данных для обновления инвентаря\r\n            const inventoryData = filteredInventory.map(item => ({\r\n                inventory_id: item.id,\r\n                quantity: item.quantity\r\n            }));\r\n\r\n            await axios.put(`${SERVER_URL}/tasks/${taskId}/inventory`, {\r\n                inventory: inventoryData\r\n            });\r\n\r\n            if (formData.selectedImages && formData.selectedImages.length > 0) {\r\n                const imagesFormData = new FormData();\r\n                formData.selectedImages.forEach((imageUri, index) => {\r\n                    imagesFormData.append('photos', {\r\n                        name: `photo_${index}.jpg`,\r\n                        type: 'image/jpeg',\r\n                        uri: Platform.OS === 'android' ? imageUri : imageUri.replace('file://', ''),\r\n                    });\r\n                });\r\n\r\n                await axios.post(`${SERVER_URL}/tasks/${taskId}/photos`, imagesFormData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                console.log('Изображения успешно загружены на сервер');\r\n            }\r\n        }\r\n\r\n        taskEventEmitter.emit('taskUpdated');\r\n    } catch (error) {\r\n        console.error('Ошибка при добавлении задачи:', error);\r\n    }\r\n};\r\n\r\n// Функция для обновления черновика\r\nexport const updateDraft = async (draftId, formData) => {\r\n    console.log('Отправляемые данные:', formData);\r\n\r\n    // Преобразование данных в формат, ожидаемый сервером\r\n    const dataToSend = {\r\n        status: formData.status,\r\n        service: formData.selectedService.join(', '),\r\n        payment: formData.paymentMethod,\r\n        cost: formData.cost,\r\n        start_date: formData.startDate ? format(formData.startDate, 'yyyy-MM-dd') : null,\r\n        start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : null,\r\n        end_date: formData.endDate ? format(formData.endDate, 'yyyy-MM-dd') : null,\r\n        end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : null,\r\n        responsible: formData.selectedResponsible,\r\n        fullname_client: formData.fullnameClient,\r\n        address_client: formData.addressClient,\r\n        phone: formData.phone,\r\n        description: formData.description,\r\n        employees: formData.selectedEmployee.join(','), // Предполагается, что это массив ID сотрудников\r\n        services: formData.selectedService, // Предполагается, что это массив ID услуг\r\n        // Добавьте другие поля, если они необходимы\r\n    };\r\n    console.log('dataToSend данные:', dataToSend);\r\n    try {\r\n        const response = await axios.put(`${SERVER_URL}/tasks/${draftId}`, dataToSend);\r\n        console.log('Черновик успешно обновлен. Данные ответа:', response.data);\r\n    } catch (error) {\r\n        console.error('Ошибка при обновлении черновика:', error);\r\n    }\r\n};\r\n\r\nexport const SuccessModal = React.memo(({ isVisible, onClose }) => {\r\n    if (!isVisible) return null;\r\n\r\n    return (\r\n        <Modal\r\n            visible={isVisible}\r\n            transparent={false}\r\n            animationType=\"slide\"\r\n        >\r\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                <Text style={{ fontSize: 20, marginBottom: 20 }}>Задача успешно добавлена!</Text>\r\n                <TouchableOpacity\r\n                    onPress={onClose}\r\n                    style={{ backgroundColor: 'blue', padding: 10, borderRadius: 5 }}\r\n                >\r\n                    <Text style={{ color: 'white' }}>Отлично</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </Modal>\r\n    );\r\n});\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}