{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { format } from 'date-fns';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var SERVER_URL = 'http://31.129.101.174';\nexport var isToday = function isToday(date) {\n  var today = new Date();\n  return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n};\nexport var fetchTaskDates = function () {\n  var _ref = _asyncToGenerator(function* (setTaskDates) {\n    try {\n      var response = yield axios.get(`${SERVER_URL}/task-dates`);\n      setTaskDates(response.data);\n      yield AsyncStorage.setItem('taskDates', JSON.stringify(response.data));\n    } catch (e) {\n      console.error('Ошибка при загрузке индекса дат задач: ', e);\n      setTaskDates({});\n    }\n  });\n  return function fetchTaskDates(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchTasksForSelectedDate = function () {\n  var _ref2 = _asyncToGenerator(function* (selectedDate, setTasks) {\n    try {\n      var formattedDate = format(selectedDate, 'yyyy-MM-dd');\n      var response = yield axios.get(`${SERVER_URL}/tasks`, {\n        params: {\n          date: formattedDate\n        }\n      });\n      setTasks(response.data);\n    } catch (e) {\n      console.error('Не удалось загрузить задачи для выбранной даты: ', e);\n      setTasks([]);\n    }\n  });\n  return function fetchTasksForSelectedDate(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchTasksForDetail = function () {\n  var _ref3 = _asyncToGenerator(function* (setTasks) {\n    try {\n      var response = yield axios.get(`${SERVER_URL}/tasks`);\n      setTasks(response.data);\n    } catch (e) {\n      console.error('Не удалось загрузить задачи для выбранной даты: ', e);\n      setTasks([]);\n    }\n  });\n  return function fetchTasksForDetail(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchServiceNamesByIds = function () {\n  var _ref4 = _asyncToGenerator(function* (serviceIds) {\n    try {\n      if (typeof serviceIds !== 'string') {\n        throw new Error('serviceIds должна быть строкой с идентификаторами, разделенными запятой');\n      }\n      if (serviceIds.trim().length === 0) {\n        return {\n          noServices: 'Услуга не выбрана'\n        };\n      }\n      var idsArray = serviceIds.split(',').map(function (id) {\n        return parseInt(id.trim(), 10);\n      });\n      var response = yield axios.post(`${SERVER_URL}/services/names`, {\n        ids: idsArray\n      });\n      return response.data.reduce(function (acc, service) {\n        acc[service.id] = service.service_name;\n        return acc;\n      }, {});\n    } catch (e) {\n      console.error('Ошибка при загрузке названий услуг: ', e);\n      return {};\n    }\n  });\n  return function fetchServiceNamesByIds(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var fetchDraftData = function () {\n  var _ref5 = _asyncToGenerator(function* (taskId) {\n    try {\n      var response = yield axios.get(`${SERVER_URL}/tasks/draft/${taskId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Ошибка при получении данных черновика:', error);\n      throw error;\n    }\n  });\n  return function fetchDraftData(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var fetchTaskParticipants = function () {\n  var _ref6 = _asyncToGenerator(function* (taskId) {\n    try {\n      var response = yield axios.get(`http://31.129.101.174/task-participants/${taskId}`);\n      if (response.data && Array.isArray(response.data)) {\n        return response.data;\n      } else {\n        throw new Error(\"Некорректный формат данных\");\n      }\n    } catch (error) {\n      console.error('Ошибка при получении участников:', error);\n      throw error;\n    }\n  });\n  return function fetchTaskParticipants(_x7) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var fetchTaskDetails = function () {\n  var _ref7 = _asyncToGenerator(function* (taskId) {\n    try {\n      var response = yield axios.get(`${SERVER_URL}/tasks/${taskId}`);\n      setTask(response.data);\n    } catch (error) {\n      console.error('Ошибка при загрузке деталей задачи:', error);\n    }\n  });\n  return function fetchTaskDetails(_x8) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["format","axios","AsyncStorage","SERVER_URL","isToday","date","today","Date","getDate","getMonth","getFullYear","fetchTaskDates","_ref","_asyncToGenerator","setTaskDates","response","get","data","setItem","JSON","stringify","e","console","error","_x","apply","arguments","fetchTasksForSelectedDate","_ref2","selectedDate","setTasks","formattedDate","params","_x2","_x3","fetchTasksForDetail","_ref3","_x4","fetchServiceNamesByIds","_ref4","serviceIds","Error","trim","length","noServices","idsArray","split","map","id","parseInt","post","ids","reduce","acc","service","service_name","_x5","fetchDraftData","_ref5","taskId","_x6","fetchTaskParticipants","_ref6","Array","isArray","_x7","fetchTaskDetails","_ref7","setTask","_x8"],"sources":["C:/Users/fred/Desktop/crm/src/utils/tasks.js"],"sourcesContent":["import { format } from 'date-fns';\r\nimport axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport const SERVER_URL = 'http://31.129.101.174';\r\n\r\nexport const isToday = (date) => {\r\n  const today = new Date();\r\n  return date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear();\r\n};\r\n\r\nexport const fetchTaskDates = async (setTaskDates) => {\r\n  try {\r\n    const response = await axios.get(`${SERVER_URL}/task-dates`);\r\n    setTaskDates(response.data); // Прямо сохраняем данные из ответа сервера\r\n    await AsyncStorage.setItem('taskDates', JSON.stringify(response.data));\r\n  } catch (e) {\r\n    console.error('Ошибка при загрузке индекса дат задач: ', e);\r\n    setTaskDates({});\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const fetchTasksForSelectedDate = async (selectedDate, setTasks) => {\r\n  try {\r\n    const formattedDate = format(selectedDate, 'yyyy-MM-dd');\r\n    const response = await axios.get(`${SERVER_URL}/tasks`, { params: { date: formattedDate } });\r\n    setTasks(response.data);\r\n  } catch (e) {\r\n    console.error('Не удалось загрузить задачи для выбранной даты: ', e);\r\n    setTasks([]);\r\n  }\r\n};\r\n\r\nexport const fetchTasksForDetail = async (setTasks) => {\r\n  try {\r\n    const response = await axios.get(`${SERVER_URL}/tasks`);\r\n    setTasks(response.data);\r\n  } catch (e) {\r\n    console.error('Не удалось загрузить задачи для выбранной даты: ', e);\r\n    setTasks([]);\r\n  }\r\n};\r\n\r\nexport const fetchServiceNamesByIds = async (serviceIds) => {\r\n  try {\r\n    if (typeof serviceIds !== 'string') {\r\n      throw new Error('serviceIds должна быть строкой с идентификаторами, разделенными запятой');\r\n    }\r\n\r\n    // Проверка, есть ли выбранные услуги\r\n    if (serviceIds.trim().length === 0) {\r\n      return { noServices: 'Услуга не выбрана' };\r\n    }\r\n\r\n    // Преобразуем строку в массив чисел\r\n    const idsArray = serviceIds.split(',').map(id => parseInt(id.trim(), 10));\r\n    const response = await axios.post(`${SERVER_URL}/services/names`, { ids: idsArray });\r\n\r\n    // Возвращаем объект с названиями услуг, индексированный по ID услуг\r\n    return response.data.reduce((acc, service) => {\r\n      acc[service.id] = service.service_name;\r\n      return acc;\r\n    }, {});\r\n  } catch (e) {\r\n    console.error('Ошибка при загрузке названий услуг: ', e);\r\n    return {};\r\n  }\r\n};\r\n\r\nexport const fetchDraftData = async (taskId) => {\r\n  try {\r\n    const response = await axios.get(`${SERVER_URL}/tasks/draft/${taskId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Здесь можно более тонко обработать ошибку, возможно, даже возвращать разные ошибки в зависимости от статуса ответа сервера\r\n    console.error('Ошибка при получении данных черновика:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchTaskParticipants = async (taskId) => {\r\n  try {\r\n    const response = await axios.get(`http://31.129.101.174/task-participants/${taskId}`);\r\n    if (response.data && Array.isArray(response.data)) {\r\n      return response.data; // Убедитесь, что это массив\r\n    } else {\r\n      throw new Error(\"Некорректный формат данных\");\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении участников:', error);\r\n    throw error; // Перебрасываем ошибку дальше\r\n  }\r\n};\r\n\r\nexport const fetchTaskDetails = async (taskId) => {\r\n  try {\r\n    // Загрузка данных о задаче\r\n    const response = await axios.get(`${SERVER_URL}/tasks/${taskId}`);\r\n    setTask(response.data);\r\n  } catch (error) {\r\n    console.error('Ошибка при загрузке деталей задачи:', error);\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}