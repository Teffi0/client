{"ast":null,"code":"export var formatTime = function formatTime(time) {\n  if (!time || typeof time !== 'string' || time.length < 5) {\n    return 'Некорректное время';\n  }\n  return time.slice(0, 5);\n};\nexport var truncateService = function truncateService(service) {\n  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 36;\n  if (typeof service !== 'string') return '';\n  return service.length > maxLength ? `${service.slice(0, maxLength - 1)}...` : service;\n};\nexport var formatAddress = function formatAddress(fullAddress) {\n  var parts = fullAddress.split(',').map(function (part) {\n    return part.trim();\n  });\n  var streetPart = parts.find(function (part) {\n    return /улица/i.test(part);\n  }) || parts.find(function (part) {\n    return /ул\\./i.test(part);\n  });\n  var houseIndex = streetPart ? parts.indexOf(streetPart) + 1 : -1;\n  var housePart = houseIndex > -1 && houseIndex < parts.length ? parts[houseIndex] : null;\n  if (!streetPart || !housePart) return 'Адрес не найден';\n  var street = streetPart.replace(/улица/i, '').replace(/ул\\./i, '').trim();\n  var house = housePart.replace(/дом/i, '').replace(/д\\./i, '').trim();\n  return `ул.${street}, д.${house}`;\n};\nexport var getServiceName = function getServiceName(service, services) {\n  var serviceIds = service.split(',').map(function (id) {\n    return id.trim();\n  });\n  var serviceNames = serviceIds.map(function (id) {\n    var _services$id;\n    return ((_services$id = services[id]) == null ? void 0 : _services$id.service_name) || 'Неизвестная услуга';\n  });\n  return serviceNames.join(', ');\n};","map":{"version":3,"names":["formatTime","time","length","slice","truncateService","service","maxLength","arguments","undefined","formatAddress","fullAddress","parts","split","map","part","trim","streetPart","find","test","houseIndex","indexOf","housePart","street","replace","house","getServiceName","services","serviceIds","id","serviceNames","_services$id","service_name","join"],"sources":["C:/Users/fred/Desktop/crm/src/utils/utils.js"],"sourcesContent":["/**\r\n * Обрезает время до формата HH:MM.\r\n * @param {string} time - Время в любом формате.\r\n * @returns {string} - Время в формате HH:MM.\r\n */\r\nexport const formatTime = (time) => {\r\n    if (!time || typeof time !== 'string' || time.length < 5) {\r\n      return 'Некорректное время';\r\n    }\r\n    return time.slice(0, 5);\r\n  };\r\n  \r\n\r\n/**\r\n * Обрезает строку услуги до указанной длины.\r\n * @param {string} service - Название услуги.\r\n * @param {number} maxLength - Максимальная длина строки.\r\n * @returns {string} - Обрезанная строка услуги.\r\n */\r\nexport const truncateService = (service, maxLength = 36) => {\r\n    if (typeof service !== 'string') return '';\r\n    return service.length > maxLength ? `${service.slice(0, maxLength - 1)}...` : service;\r\n  };\r\n  \r\n/**\r\n * Форматирует адрес, оставляя только важные части.\r\n * @param {string} fullAddress - Полный адрес.\r\n * @returns {string} - Форматированный адрес.\r\n */\r\nexport const formatAddress = (fullAddress) => {\r\n  const parts = fullAddress.split(',').map(part => part.trim());\r\n  \r\n  // Ищем часть с улицей\r\n  const streetPart = parts.find(part => /улица/i.test(part)) || parts.find(part => /ул\\./i.test(part));\r\n\r\n  // Ищем часть с номером дома, предполагается, что номер дома идет после названия улицы\r\n  const houseIndex = streetPart ? parts.indexOf(streetPart) + 1 : -1;\r\n  const housePart = houseIndex > -1 && houseIndex < parts.length ? parts[houseIndex] : null;\r\n  \r\n  if (!streetPart || !housePart) return 'Адрес не найден';\r\n\r\n  // Очищаем названия улицы и номер дома от лишних слов\r\n  const street = streetPart.replace(/улица/i, '').replace(/ул\\./i, '').trim();\r\n  const house = housePart.replace(/дом/i, '').replace(/д\\./i, '').trim();\r\n\r\n  return `ул.${street}, д.${house}`;\r\n};\r\n\r\n/**\r\n * Преобразует строку услуги в название услуги, используя объект services.\r\n * @param {string} service - Строка услуги.\r\n * @param {Object} services - Объект, содержащий соответствия между ID услуги и её названием.\r\n * @returns {string} - Название услуги.\r\n */\r\nexport const getServiceName = (service, services) => {\r\n  // Предполагаем, что service - это строка с ID услуги, разделенными запятыми.\r\n  const serviceIds = service.split(',').map(id => id.trim());\r\n  const serviceNames = serviceIds.map(id => services[id]?.service_name || 'Неизвестная услуга');\r\n  return serviceNames.join(', ');\r\n};\r\n"],"mappings":"AAKA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAI,EAAK;EAChC,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IACxD,OAAO,oBAAoB;EAC7B;EACA,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AASH,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,OAAO,EAAqB;EAAA,IAAnBC,SAAS,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACnD,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE,OAAO,EAAE;EAC1C,OAAOA,OAAO,CAACH,MAAM,GAAGI,SAAS,GAAI,GAAED,OAAO,CAACF,KAAK,CAAC,CAAC,EAAEG,SAAS,GAAG,CAAC,CAAE,KAAI,GAAGD,OAAO;AACvF,CAAC;AAOH,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,WAAW,EAAK;EAC5C,IAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAAC,IAAI;IAAA,OAAIA,IAAI,CAACC,IAAI,CAAC,CAAC;EAAA,EAAC;EAG7D,IAAMC,UAAU,GAAGL,KAAK,CAACM,IAAI,CAAC,UAAAH,IAAI;IAAA,OAAI,QAAQ,CAACI,IAAI,CAACJ,IAAI,CAAC;EAAA,EAAC,IAAIH,KAAK,CAACM,IAAI,CAAC,UAAAH,IAAI;IAAA,OAAI,OAAO,CAACI,IAAI,CAACJ,IAAI,CAAC;EAAA,EAAC;EAGpG,IAAMK,UAAU,GAAGH,UAAU,GAAGL,KAAK,CAACS,OAAO,CAACJ,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAClE,IAAMK,SAAS,GAAGF,UAAU,GAAG,CAAC,CAAC,IAAIA,UAAU,GAAGR,KAAK,CAACT,MAAM,GAAGS,KAAK,CAACQ,UAAU,CAAC,GAAG,IAAI;EAEzF,IAAI,CAACH,UAAU,IAAI,CAACK,SAAS,EAAE,OAAO,iBAAiB;EAGvD,IAAMC,MAAM,GAAGN,UAAU,CAACO,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACR,IAAI,CAAC,CAAC;EAC3E,IAAMS,KAAK,GAAGH,SAAS,CAACE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACR,IAAI,CAAC,CAAC;EAEtE,OAAQ,MAAKO,MAAO,OAAME,KAAM,EAAC;AACnC,CAAC;AAQD,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIpB,OAAO,EAAEqB,QAAQ,EAAK;EAEnD,IAAMC,UAAU,GAAGtB,OAAO,CAACO,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAAe,EAAE;IAAA,OAAIA,EAAE,CAACb,IAAI,CAAC,CAAC;EAAA,EAAC;EAC1D,IAAMc,YAAY,GAAGF,UAAU,CAACd,GAAG,CAAC,UAAAe,EAAE;IAAA,IAAAE,YAAA;IAAA,OAAI,EAAAA,YAAA,GAAAJ,QAAQ,CAACE,EAAE,CAAC,qBAAZE,YAAA,CAAcC,YAAY,KAAI,oBAAoB;EAAA,EAAC;EAC7F,OAAOF,YAAY,CAACG,IAAI,CAAC,IAAI,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}