{"ast":null,"code":"import React, { memo, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport VirtualizedList from \"react-native-web/dist/exports/VirtualizedList\";\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport styles from \"../styles/styles\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Day = memo(function (_ref) {\n  var day = _ref.day,\n    handleDatePress = _ref.handleDatePress,\n    isSelectedDay = _ref.isSelectedDay,\n    hasTask = _ref.hasTask;\n  if (!day) {\n    return _jsx(View, {\n      style: styles.dayContainer\n    });\n  }\n  var dayButtonStyle = [styles.dayButton, {\n    flex: 1\n  }];\n  var formattedDay = day instanceof Date ? format(day, 'd', {\n    locale: ru\n  }) : '';\n  return _jsx(View, {\n    style: styles.dayContainer,\n    children: _jsxs(TouchableOpacity, {\n      style: dayButtonStyle,\n      onPress: function onPress() {\n        return handleDatePress(day);\n      },\n      children: [_jsx(Text, {\n        style: [styles.dayText, isSelectedDay ? styles.today : null],\n        children: formattedDay\n      }), hasTask && _jsx(View, {\n        style: styles.taskDotActive\n      })]\n    })\n  });\n});\nDay.propTypes = {\n  day: PropTypes.instanceOf(Date),\n  handleDatePress: PropTypes.func.isRequired,\n  isSelectedDay: PropTypes.bool.isRequired,\n  hasTask: PropTypes.bool.isRequired\n};\nvar RenderMonth = memo(function (_ref2) {\n  var date = _ref2.date,\n    handleDatePress = _ref2.handleDatePress,\n    taskDates = _ref2.taskDates;\n  var weeks = useMemo(function () {\n    var start = startOfWeek(startOfMonth(date));\n    var end = endOfWeek(endOfMonth(date));\n    var weeks = [];\n    var currentDay = start;\n    while (currentDay <= end) {\n      var currentWeek = Array.from({\n        length: 7\n      }, function (_, i) {\n        var day = addDays(currentDay, i);\n        return day.getMonth() === date.getMonth() ? day : null;\n      });\n      weeks.push(currentWeek);\n      currentDay = addDays(currentWeek[6], 1);\n    }\n    return weeks;\n  }, [date]);\n  var todayFormatted = format(new Date(), 'yyyy-MM-dd');\n  return _jsxs(View, {\n    style: styles.monthContainer,\n    children: [_jsx(Text, {\n      style: styles.monthName,\n      children: format(date, 'MMMM', {\n        locale: ru\n      })\n    }), _jsx(VirtualizedList, {\n      data: weeks,\n      renderItem: function renderItem(_ref3) {\n        var week = _ref3.item;\n        return _jsx(View, {\n          style: styles.weekContainer,\n          children: week.map(function (day, index) {\n            var formattedDate = format(day, 'yyyy-MM-dd');\n            var hasTask = ['в процессе', 'новая'].includes(taskDates[formattedDate]);\n            return _jsx(Day, {\n              day: day,\n              handleDatePress: handleDatePress,\n              isSelectedDay: todayFormatted === formattedDate,\n              hasTask: hasTask\n            }, day ? formattedDate : `empty-${index}`);\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(_, index) {\n        return `week-${index}`;\n      },\n      getItemCount: function getItemCount() {\n        return weeks.length;\n      },\n      getItem: function getItem(data, index) {\n        return weeks[index];\n      }\n    })]\n  });\n});\nRenderMonth.propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n  handleDatePress: PropTypes.func.isRequired,\n  taskDates: PropTypes.object.isRequired\n};\nexport default RenderMonth;","map":{"version":3,"names":["React","memo","useMemo","View","Text","TouchableOpacity","VirtualizedList","format","startOfMonth","endOfMonth","startOfWeek","endOfWeek","addDays","ru","styles","PropTypes","jsx","_jsx","jsxs","_jsxs","Day","_ref","day","handleDatePress","isSelectedDay","hasTask","style","dayContainer","dayButtonStyle","dayButton","flex","formattedDay","Date","locale","children","onPress","dayText","today","taskDotActive","propTypes","instanceOf","func","isRequired","bool","RenderMonth","_ref2","date","taskDates","weeks","start","end","currentDay","currentWeek","Array","from","length","_","i","getMonth","push","todayFormatted","monthContainer","monthName","data","renderItem","_ref3","week","item","weekContainer","map","index","formattedDate","includes","keyExtractor","getItemCount","getItem","object"],"sources":["C:/Users/fred/Desktop/client/src/components/RenderMonth.js"],"sourcesContent":["import React, { memo, useMemo } from 'react';\r\nimport { View, Text, TouchableOpacity, VirtualizedList } from 'react-native';\r\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from '../styles/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Day = memo(({ day, handleDatePress, isSelectedDay, hasTask }) => {\r\n    if (!day) {\r\n        return <View style={styles.dayContainer} />;\r\n    }\r\n\r\n    const dayButtonStyle = [styles.dayButton, { flex: 1 }];\r\n    const formattedDay = day instanceof Date ? format(day, 'd', { locale: ru }) : '';\r\n\r\n    return (\r\n        <View style={styles.dayContainer}>\r\n            <TouchableOpacity\r\n                style={dayButtonStyle}\r\n                onPress={() => handleDatePress(day)}\r\n            >\r\n                <Text style={[styles.dayText, isSelectedDay ? styles.today : null]}>\r\n                    {formattedDay}\r\n                </Text>\r\n                {hasTask && <View style={styles.taskDotActive} />}\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n});\r\n\r\nDay.propTypes = {\r\n    day: PropTypes.instanceOf(Date),\r\n    handleDatePress: PropTypes.func.isRequired,\r\n    isSelectedDay: PropTypes.bool.isRequired,\r\n    hasTask: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst RenderMonth = memo(({ date, handleDatePress, taskDates }) => {\r\n    const weeks = useMemo(() => {\r\n        const start = startOfWeek(startOfMonth(date));\r\n        const end = endOfWeek(endOfMonth(date));\r\n        const weeks = [];\r\n        let currentDay = start;\r\n\r\n        while (currentDay <= end) {\r\n            const currentWeek = Array.from({ length: 7 }, (_, i) => {\r\n                const day = addDays(currentDay, i);\r\n                return day.getMonth() === date.getMonth() ? day : null;\r\n            });\r\n            weeks.push(currentWeek);\r\n            currentDay = addDays(currentWeek[6], 1);\r\n        }\r\n        return weeks;\r\n    }, [date]);\r\n\r\n    const todayFormatted = format(new Date(), 'yyyy-MM-dd');\r\n\r\n    return (\r\n        <View style={styles.monthContainer}>\r\n            <Text style={styles.monthName}>{format(date, 'MMMM', { locale: ru })}</Text>\r\n            <VirtualizedList\r\n                data={weeks}\r\n                renderItem={({ item: week }) => (\r\n                    <View style={styles.weekContainer}>\r\n                        {week.map((day, index) => {\r\n                            const formattedDate = format(day, 'yyyy-MM-dd');\r\n                            const hasTask = ['в процессе', 'новая'].includes(taskDates[formattedDate]);\r\n        \r\n                            return (\r\n                                <Day\r\n                                    key={day ? formattedDate : `empty-${index}`}\r\n                                    day={day}\r\n                                    handleDatePress={handleDatePress}\r\n                                    isSelectedDay={todayFormatted === formattedDate}\r\n                                    hasTask={hasTask}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </View>\r\n                )}\r\n                keyExtractor={(_, index) => `week-${index}`}\r\n                getItemCount={() => weeks.length}\r\n                getItem={(data, index) => weeks[index]}\r\n            />\r\n        </View>\r\n    );\r\n});\r\n\r\nRenderMonth.propTypes = {\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n    handleDatePress: PropTypes.func.isRequired,\r\n    taskDates: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RenderMonth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}