{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback, memo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport { format } from 'date-fns';\nimport { CalendarIcon } from \"../icons\";\nimport styles from \"../styles/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DateInput = function DateInput(_ref) {\n  var date = _ref.date,\n    placeholder = _ref.placeholder,\n    onDateChange = _ref.onDateChange,\n    dateType = _ref.dateType,\n    minDate = _ref.minDate,\n    maxDate = _ref.maxDate;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDatePickerVisible = _useState2[0],\n    setDatePickerVisibility = _useState2[1];\n  var showDatePicker = useCallback(function () {\n    setDatePickerVisibility(true);\n  }, []);\n  var hideDatePicker = useCallback(function () {\n    setDatePickerVisibility(false);\n  }, []);\n  var handleDateConfirm = useCallback(function (selectedDate) {\n    hideDatePicker();\n    onDateChange(dateType, selectedDate);\n  }, [dateType, onDateChange, hideDatePicker]);\n  return _jsxs(View, {\n    children: [_jsxs(TouchableOpacity, {\n      onPress: showDatePicker,\n      style: styles.dateInputContainer,\n      children: [_jsx(TextInput, {\n        value: date ? format(date, 'yyyy-MM-dd') : '',\n        placeholder: placeholder,\n        editable: false,\n        style: styles.dateInputText\n      }), _jsx(CalendarIcon, {})]\n    }), _jsx(DateTimePickerModal, {\n      isVisible: isDatePickerVisible,\n      mode: \"date\",\n      onConfirm: handleDateConfirm,\n      onCancel: hideDatePicker,\n      minimumDate: minDate,\n      maximumDate: maxDate,\n      date: date || new Date()\n    })]\n  });\n};\nexport default DateInput;","map":{"version":3,"names":["React","useState","useCallback","memo","View","TouchableOpacity","TextInput","DateTimePickerModal","format","CalendarIcon","styles","jsx","_jsx","jsxs","_jsxs","DateInput","_ref","date","placeholder","onDateChange","dateType","minDate","maxDate","_useState","_useState2","_slicedToArray","isDatePickerVisible","setDatePickerVisibility","showDatePicker","hideDatePicker","handleDateConfirm","selectedDate","children","onPress","style","dateInputContainer","value","editable","dateInputText","isVisible","mode","onConfirm","onCancel","minimumDate","maximumDate","Date"],"sources":["C:/Users/fred/Desktop/crm/src/components/DateInput.js"],"sourcesContent":["import React, { useState, useCallback, memo } from 'react';\r\nimport { View, TouchableOpacity, TextInput } from 'react-native';\r\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\r\nimport { format } from 'date-fns';\r\nimport { CalendarIcon } from '../icons';\r\nimport styles from '../styles/styles';\r\n\r\nconst DateInput = ({ date, placeholder, onDateChange, dateType, minDate, maxDate }) => {\r\n  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);\r\n\r\n  const showDatePicker = useCallback(() => {\r\n    setDatePickerVisibility(true);\r\n  }, []);\r\n\r\n  const hideDatePicker = useCallback(() => {\r\n    setDatePickerVisibility(false);\r\n  }, []);\r\n\r\n  const handleDateConfirm = useCallback((selectedDate) => {\r\n    hideDatePicker();\r\n    onDateChange(dateType, selectedDate);\r\n  }, [dateType, onDateChange, hideDatePicker]);\r\n\r\n  return (\r\n    <View>\r\n      <TouchableOpacity onPress={showDatePicker} style={styles.dateInputContainer}>\r\n        <TextInput\r\n          value={date ? format(date, 'yyyy-MM-dd') : ''}\r\n          placeholder={placeholder}\r\n          editable={false}\r\n          style={styles.dateInputText}\r\n        />\r\n        <CalendarIcon />\r\n      </TouchableOpacity>\r\n      <DateTimePickerModal\r\n        isVisible={isDatePickerVisible}\r\n        mode=\"date\"\r\n        onConfirm={handleDateConfirm}\r\n        onCancel={hideDatePicker}\r\n        minimumDate={minDate}\r\n        maximumDate={maxDate}\r\n        date={date || new Date()}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default DateInput;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,IAAI,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,SAAA;AAE3D,OAAOC,mBAAmB,MAAM,oCAAoC;AACpE,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,YAAY;AACrB,OAAOC,MAAM;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtC,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAAC,IAAA,EAAwE;EAAA,IAAlEC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IAAEC,YAAY,GAAAH,IAAA,CAAZG,YAAY;IAAEC,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;IAAEC,OAAO,GAAAL,IAAA,CAAPK,OAAO;IAAEC,OAAO,GAAAN,IAAA,CAAPM,OAAO;EAC9E,IAAAC,SAAA,GAAuDtB,QAAQ,CAAC,KAAK,CAAC;IAAAuB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/DG,mBAAmB,GAAAF,UAAA;IAAEG,uBAAuB,GAAAH,UAAA;EAEnD,IAAMI,cAAc,GAAG1B,WAAW,CAAC,YAAM;IACvCyB,uBAAuB,CAAC,IAAI,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAME,cAAc,GAAG3B,WAAW,CAAC,YAAM;IACvCyB,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMG,iBAAiB,GAAG5B,WAAW,CAAC,UAAC6B,YAAY,EAAK;IACtDF,cAAc,CAAC,CAAC;IAChBV,YAAY,CAACC,QAAQ,EAAEW,YAAY,CAAC;EACtC,CAAC,EAAE,CAACX,QAAQ,EAAED,YAAY,EAAEU,cAAc,CAAC,CAAC;EAE5C,OACEf,KAAA,CAACV,IAAI;IAAA4B,QAAA,GACHlB,KAAA,CAACT,gBAAgB;MAAC4B,OAAO,EAAEL,cAAe;MAACM,KAAK,EAAExB,MAAM,CAACyB,kBAAmB;MAAAH,QAAA,GAC1EpB,IAAA,CAACN,SAAS;QACR8B,KAAK,EAAEnB,IAAI,GAAGT,MAAM,CAACS,IAAI,EAAE,YAAY,CAAC,GAAG,EAAG;QAC9CC,WAAW,EAAEA,WAAY;QACzBmB,QAAQ,EAAE,KAAM;QAChBH,KAAK,EAAExB,MAAM,CAAC4B;MAAc,CAC7B,CAAC,EACF1B,IAAA,CAACH,YAAY,IAAE,CAAC;IAAA,CACA,CAAC,EACnBG,IAAA,CAACL,mBAAmB;MAClBgC,SAAS,EAAEb,mBAAoB;MAC/Bc,IAAI,EAAC,MAAM;MACXC,SAAS,EAAEX,iBAAkB;MAC7BY,QAAQ,EAAEb,cAAe;MACzBc,WAAW,EAAEtB,OAAQ;MACrBuB,WAAW,EAAEtB,OAAQ;MACrBL,IAAI,EAAEA,IAAI,IAAI,IAAI4B,IAAI,CAAC;IAAE,CAC1B,CAAC;EAAA,CACE,CAAC;AAEX,CAAC;AAED,eAAe9B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}