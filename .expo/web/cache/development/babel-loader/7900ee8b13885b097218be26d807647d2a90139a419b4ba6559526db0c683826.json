{"ast":null,"code":"import React, { memo, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport VirtualizedList from \"react-native-web/dist/exports/VirtualizedList\";\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport styles from \"../styles/styles\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar calculateWeeks = function calculateWeeks(date) {\n  var start = startOfWeek(startOfMonth(date));\n  var end = endOfWeek(endOfMonth(date));\n  var currentDay = start;\n  var weeks = [];\n  while (currentDay <= end) {\n    weeks.push(Array.from({\n      length: 7\n    }, function (_, i) {\n      var day = addDays(currentDay, i);\n      return day.getMonth() === date.getMonth() ? day : null;\n    }));\n    currentDay = addDays(currentDay, 7);\n  }\n  return weeks;\n};\nvar Day = memo(function (_ref) {\n  var day = _ref.day,\n    handleDatePress = _ref.handleDatePress,\n    isSelectedDay = _ref.isSelectedDay,\n    hasTask = _ref.hasTask;\n  return _jsx(View, {\n    style: styles.dayContainer,\n    children: day ? _jsxs(TouchableOpacity, {\n      style: [styles.dayButton, {\n        flex: 1\n      }],\n      onPress: function onPress() {\n        return handleDatePress(day);\n      },\n      children: [_jsx(Text, {\n        style: [styles.dayText, isSelectedDay && styles.today],\n        children: format(day, 'd', {\n          locale: ru\n        })\n      }), hasTask && _jsx(View, {\n        style: styles.taskDotActive\n      })]\n    }) : null\n  });\n});\nDay.propTypes = {\n  day: PropTypes.instanceOf(Date),\n  handleDatePress: PropTypes.func.isRequired,\n  isSelectedDay: PropTypes.bool.isRequired,\n  hasTask: PropTypes.bool\n};\nDay.defaultProps = {\n  hasTask: false\n};\nvar RenderMonth = memo(function (_ref2) {\n  var date = _ref2.date,\n    handleDatePress = _ref2.handleDatePress,\n    taskDates = _ref2.taskDates;\n  var weeks = useMemo(function () {\n    return calculateWeeks(date);\n  }, [date]);\n  var todayFormatted = format(new Date(), 'yyyy-MM-dd');\n  return _jsxs(View, {\n    style: styles.monthContainer,\n    children: [_jsx(Text, {\n      style: styles.monthName,\n      children: format(date, 'MMMM', {\n        locale: ru\n      })\n    }), _jsx(VirtualizedList, {\n      data: weeks,\n      renderItem: function renderItem(_ref3) {\n        var week = _ref3.item;\n        return _jsx(View, {\n          style: styles.weekContainer,\n          children: week.map(function (day, index) {\n            return _jsx(Day, {\n              day: day,\n              handleDatePress: handleDatePress,\n              isSelectedDay: day && format(day, 'yyyy-MM-dd') === todayFormatted,\n              hasTask: day && ['в процессе', 'новая'].includes(taskDates[format(day, 'yyyy-MM-dd')])\n            }, day ? format(day, 'yyyy-MM-dd') : `empty-${index}`);\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(_, index) {\n        return `week-${index}`;\n      },\n      getItemCount: function getItemCount() {\n        return weeks.length;\n      },\n      getItem: function getItem(data, index) {\n        return weeks[index];\n      }\n    })]\n  });\n});\nRenderMonth.propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n  handleDatePress: PropTypes.func.isRequired,\n  taskDates: PropTypes.object.isRequired\n};\nexport default RenderMonth;","map":{"version":3,"names":["React","memo","useMemo","View","Text","TouchableOpacity","VirtualizedList","format","startOfMonth","endOfMonth","startOfWeek","endOfWeek","addDays","ru","styles","PropTypes","jsx","_jsx","jsxs","_jsxs","calculateWeeks","date","start","end","currentDay","weeks","push","Array","from","length","_","i","day","getMonth","Day","_ref","handleDatePress","isSelectedDay","hasTask","style","dayContainer","children","dayButton","flex","onPress","dayText","today","locale","taskDotActive","propTypes","instanceOf","Date","func","isRequired","bool","defaultProps","RenderMonth","_ref2","taskDates","todayFormatted","monthContainer","monthName","data","renderItem","_ref3","week","item","weekContainer","map","index","includes","keyExtractor","getItemCount","getItem","object"],"sources":["C:/Users/fred/Desktop/client/src/components/RenderMonth.js"],"sourcesContent":["import React, { memo, useMemo } from 'react';\r\nimport { View, Text, TouchableOpacity, VirtualizedList } from 'react-native';\r\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from '../styles/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst calculateWeeks = (date) => {\r\n    const start = startOfWeek(startOfMonth(date));\r\n    const end = endOfWeek(endOfMonth(date));\r\n    let currentDay = start;\r\n    const weeks = [];\r\n\r\n    while (currentDay <= end) {\r\n        weeks.push(Array.from({ length: 7 }, (_, i) => {\r\n            const day = addDays(currentDay, i);\r\n            return day.getMonth() === date.getMonth() ? day : null;\r\n        }));\r\n        currentDay = addDays(currentDay, 7);\r\n    }\r\n    return weeks;\r\n};\r\n\r\nconst Day = memo(({ day, handleDatePress, isSelectedDay, hasTask }) => (\r\n    <View style={styles.dayContainer}>\r\n        {day ? (\r\n            <TouchableOpacity\r\n                style={[styles.dayButton, { flex: 1 }]}\r\n                onPress={() => handleDatePress(day)}\r\n            >\r\n                <Text style={[styles.dayText, isSelectedDay && styles.today]}>\r\n                    {format(day, 'd', { locale: ru })}\r\n                </Text>\r\n                {hasTask && <View style={styles.taskDotActive} />}\r\n            </TouchableOpacity>\r\n        ) : null}\r\n    </View>\r\n));\r\n\r\nDay.propTypes = {\r\n    day: PropTypes.instanceOf(Date),\r\n    handleDatePress: PropTypes.func.isRequired,\r\n    isSelectedDay: PropTypes.bool.isRequired,\r\n    hasTask: PropTypes.bool, // Убрали .isRequired\r\n};\r\n\r\nDay.defaultProps = {\r\n    hasTask: false, // Значение по умолчанию для hasTask\r\n};\r\n\r\nconst RenderMonth = memo(({ date, handleDatePress, taskDates }) => {\r\n    const weeks = useMemo(() => calculateWeeks(date), [date]);\r\n    const todayFormatted = format(new Date(), 'yyyy-MM-dd');\r\n\r\n    return (\r\n        <View style={styles.monthContainer}>\r\n            <Text style={styles.monthName}>{format(date, 'MMMM', { locale: ru })}</Text>\r\n            <VirtualizedList\r\n                data={weeks}\r\n                renderItem={({ item: week }) => (\r\n                    <View style={styles.weekContainer}>\r\n                        {week.map((day, index) => (\r\n                            <Day\r\n                                key={day ? format(day, 'yyyy-MM-dd') : `empty-${index}`}\r\n                                day={day}\r\n                                handleDatePress={handleDatePress}\r\n                                isSelectedDay={day && format(day, 'yyyy-MM-dd') === todayFormatted}\r\n                                hasTask={day && ['в процессе', 'новая'].includes(taskDates[format(day, 'yyyy-MM-dd')])}\r\n                            />\r\n                        ))}\r\n                    </View>\r\n                )}\r\n                keyExtractor={(_, index) => `week-${index}`}\r\n                getItemCount={() => weeks.length}\r\n                getItem={(data, index) => weeks[index]}\r\n            />\r\n        </View>\r\n    );\r\n});\r\n\r\nRenderMonth.propTypes = {\r\n    date: PropTypes.instanceOf(Date).isRequired,\r\n    handleDatePress: PropTypes.func.isRequired,\r\n    taskDates: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RenderMonth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}