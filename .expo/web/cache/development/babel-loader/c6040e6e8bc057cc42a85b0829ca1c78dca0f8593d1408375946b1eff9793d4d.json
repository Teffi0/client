{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _dateFns = require(\"date-fns\");\nvar _locale = require(\"date-fns/locale\");\nvar _styles = _interopRequireDefault(require(\"../styles/styles\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\fred\\\\Desktop\\\\client\\\\src\\\\components\\\\DayDotsComponent.js\";\nvar DayDotsComponent = function DayDotsComponent(_ref) {\n  var days = _ref.days,\n    onDateChange = _ref.onDateChange,\n    selectedDate = _ref.selectedDate,\n    taskDates = _ref.taskDates;\n  return (0, _jsxRuntime.jsx)(_reactNative.View, {\n    style: {\n      flexDirection: 'row',\n      flex: 1\n    },\n    children: days.map(function (day) {\n      var formattedDate = (0, _dateFns.format)(day, 'yyyy-MM-dd');\n      var taskStatus = taskDates[formattedDate];\n      var hasTasks = taskStatus === 'в процессе' || taskStatus === 'новая';\n      var isToday = (0, _dateFns.isSameDay)(day, new Date());\n      var isSelected = (0, _dateFns.isSameDay)(day, selectedDate);\n      var dayButtonBase = {\n        flex: 1,\n        marginHorizontal: 4,\n        paddingVertical: 8,\n        borderRadius: 10,\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderColor: '#f0f0f0',\n        backgroundColor: 'transparent'\n      };\n      return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {\n        onPress: function onPress() {\n          return onDateChange(day);\n        },\n        style: [_styles.default.dayButton, dayButtonBase, isSelected ? _styles.default.selectedDayText : {}],\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: [_styles.default.dayName, isToday ? _styles.default.todayButton : {}],\n          children: (0, _dateFns.format)(day, 'EEEEEE', {\n            locale: _locale.ru\n          })\n        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: [_styles.default.dayNumber, isToday ? _styles.default.todayButton : {}],\n          children: (0, _dateFns.format)(day, 'd')\n        }), (0, _jsxRuntime.jsx)(_reactNative.View, {\n          style: [_styles.default.taskDot, hasTasks && _styles.default.taskDotActive]\n        })]\n      }, formattedDate);\n    })\n  });\n};\nvar _default = exports.default = DayDotsComponent;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_dateFns","_locale","_styles","_jsxRuntime","_this","_jsxFileName","DayDotsComponent","_ref","days","onDateChange","selectedDate","taskDates","jsx","View","style","flexDirection","flex","children","map","day","formattedDate","format","taskStatus","hasTasks","isToday","isSameDay","Date","isSelected","dayButtonBase","marginHorizontal","paddingVertical","borderRadius","alignItems","justifyContent","borderColor","backgroundColor","jsxs","TouchableOpacity","onPress","styles","dayButton","selectedDayText","Text","dayName","todayButton","locale","ru","dayNumber","taskDot","taskDotActive","_default","exports","default"],"sources":["C:/Users/fred/Desktop/client/src/components/DayDotsComponent.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\nimport { format, isSameDay } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from '../styles/styles';\r\n\r\nconst DayDotsComponent = ({ days, onDateChange, selectedDate, taskDates }) => {\r\n  return (\r\n    <View style={{ flexDirection: 'row', flex: 1 }}>\r\n      {days.map((day) => {\r\n        const formattedDate = format(day, 'yyyy-MM-dd');\r\n        const taskStatus = taskDates[formattedDate];\r\n        const hasTasks = taskStatus === 'в процессе' || taskStatus === 'новая';\r\n        const isToday = isSameDay(day, new Date());\r\n        const isSelected = isSameDay(day, selectedDate);\r\n\r\n        const dayButtonBase = {\r\n          flex: 1, // Устанавливаем flex: 1 для каждой кнопки\r\n          marginHorizontal: 4,\r\n          paddingVertical: 8,\r\n          borderRadius: 10,\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          borderColor: '#f0f0f0', // Цвет границы\r\n          backgroundColor: 'transparent', // Цвет фона\r\n        };\r\n\r\n        return (\r\n          <TouchableOpacity\r\n            key={formattedDate}\r\n            onPress={() => onDateChange(day)}\r\n            style={[styles.dayButton, dayButtonBase, isSelected ? styles.selectedDayText : {}]}\r\n          >\r\n            <Text style={[styles.dayName, isToday ? styles.todayButton : {}]}>\r\n              {format(day, 'EEEEEE', { locale: ru })}\r\n            </Text>\r\n            <Text style={[styles.dayNumber, isToday ? styles.todayButton : {}]}>\r\n              {format(day, 'd')}\r\n            </Text>\r\n            <View style={[styles.taskDot, hasTasks && styles.taskDotActive]} />\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default DayDotsComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}