{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport styles from \"../styles/styles\";\nimport { CalendarIcon, TodayIcon } from \"../icons\";\nimport AddButton from \"../components/AddButton\";\nimport CustomCalendar from \"../components/CustomCalendar\";\nimport VerticalCalendar from \"../components/VerticalCalendar\";\nimport NewTaskScreen from \"./NewTaskScreen\";\nimport { isToday, fetchTaskDates, fetchTasksForSelectedDate } from \"../utils/tasks\";\nimport { taskEventEmitter } from \"../Events\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar VIEW_MODES = {\n  TODAY: 'today',\n  CALENDAR: 'calendar'\n};\nvar TasksScreen = function TasksScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    taskDates = _useState4[0],\n    setTaskDates = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isNewTaskScreenVisible = _useState6[0],\n    setNewTaskScreenVisible = _useState6[1];\n  var _useState7 = useState(new Date()),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedDate = _useState8[0],\n    setSelectedDate = _useState8[1];\n  var _useState9 = useState(VIEW_MODES.TODAY),\n    _useState10 = _slicedToArray(_useState9, 2),\n    viewMode = _useState10[0],\n    setViewMode = _useState10[1];\n  var _useState11 = useState(format(selectedDate, 'd MMMM', {\n      locale: ru\n    })),\n    _useState12 = _slicedToArray(_useState11, 2),\n    headerTitle = _useState12[0],\n    setHeaderTitle = _useState12[1];\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          yield fetchTaskDates(setTaskDates);\n          yield fetchTasksForSelectedDate(selectedDate, setTasks);\n          setHeaderTitle(isToday(selectedDate) ? 'Сегодня' : format(selectedDate, 'd MMMM', {\n            locale: ru\n          }));\n        } catch (error) {\n          console.error('Error fetching tasks:', error);\n        }\n      });\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n    var handleTaskUpdate = function handleTaskUpdate() {\n      return fetchData();\n    };\n    taskEventEmitter.on('taskUpdated', handleTaskUpdate);\n    return function () {\n      return taskEventEmitter.off('taskUpdated', handleTaskUpdate);\n    };\n  }, [selectedDate]);\n  var handleViewModeToggle = useCallback(function () {\n    setViewMode(function (prevMode) {\n      return prevMode === VIEW_MODES.TODAY ? VIEW_MODES.CALENDAR : VIEW_MODES.TODAY;\n    });\n  }, []);\n  var renderCalendar = function renderCalendar() {\n    return viewMode === VIEW_MODES.TODAY ? _jsx(CustomCalendar, {\n      selectedDate: selectedDate,\n      onDateChange: setSelectedDate,\n      tasks: tasks,\n      taskDates: taskDates\n    }) : _jsx(VerticalCalendar, {\n      selectedDate: selectedDate,\n      onDateChange: setSelectedDate,\n      tasks: tasks,\n      taskDates: taskDates\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.contentContainer,\n      children: [_jsxs(View, {\n        style: styles.taskHeader,\n        children: [_jsx(Text, {\n          style: styles.titleMedium,\n          children: viewMode === VIEW_MODES.TODAY ? headerTitle : 'Календарь'\n        }), _jsxs(View, {\n          style: styles.calendarBlock,\n          children: [viewMode === VIEW_MODES.TODAY && _jsx(Text, {\n            style: styles.title,\n            children: format(selectedDate, 'MMMM, yyyy', {\n              locale: ru\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: handleViewModeToggle,\n            children: viewMode === VIEW_MODES.TODAY ? _jsx(CalendarIcon, {}) : _jsx(TodayIcon, {})\n          })]\n        })]\n      }), renderCalendar(), viewMode === VIEW_MODES.TODAY && _jsx(AddButton, {\n        onPress: function onPress() {\n          return setNewTaskScreenVisible(true);\n        }\n      })]\n    }), _jsx(Modal, {\n      visible: isNewTaskScreenVisible,\n      onRequestClose: function onRequestClose() {\n        return setNewTaskScreenVisible(false);\n      },\n      children: _jsx(NewTaskScreen, {\n        onClose: function onClose() {\n          return setNewTaskScreenVisible(false);\n        }\n      })\n    })]\n  });\n};\nexport default TasksScreen;","map":{"version":3,"names":["React","useState","useEffect","useCallback","View","Text","TouchableOpacity","Modal","SafeAreaView","format","ru","styles","CalendarIcon","TodayIcon","AddButton","CustomCalendar","VerticalCalendar","NewTaskScreen","isToday","fetchTaskDates","fetchTasksForSelectedDate","taskEventEmitter","jsx","_jsx","jsxs","_jsxs","VIEW_MODES","TODAY","CALENDAR","TasksScreen","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","taskDates","setTaskDates","_useState5","_useState6","isNewTaskScreenVisible","setNewTaskScreenVisible","_useState7","Date","_useState8","selectedDate","setSelectedDate","_useState9","_useState10","viewMode","setViewMode","_useState11","locale","_useState12","headerTitle","setHeaderTitle","fetchData","_ref","_asyncToGenerator","error","console","apply","arguments","handleTaskUpdate","on","off","handleViewModeToggle","prevMode","renderCalendar","onDateChange","style","container","children","contentContainer","taskHeader","titleMedium","calendarBlock","title","onPress","visible","onRequestClose","onClose"],"sources":["C:/Users/fred/Desktop/client/src/screens/TasksScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { View, Text, TouchableOpacity, Modal } from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { format } from 'date-fns';\r\nimport { ru } from 'date-fns/locale';\r\nimport styles from '../styles/styles';\r\nimport { CalendarIcon, TodayIcon } from '../icons';\r\nimport AddButton from '../components/AddButton';\r\nimport CustomCalendar from '../components/CustomCalendar';\r\nimport VerticalCalendar from '../components/VerticalCalendar';\r\nimport NewTaskScreen from './NewTaskScreen';\r\nimport { isToday, fetchTaskDates, fetchTasksForSelectedDate } from '../utils/tasks';\r\nimport { taskEventEmitter } from '../Events'; \r\n\r\nconst VIEW_MODES = {\r\n  TODAY: 'today',\r\n  CALENDAR: 'calendar',\r\n};\r\n\r\nconst TasksScreen = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskDates, setTaskDates] = useState([]);\r\n  const [isNewTaskScreenVisible, setNewTaskScreenVisible] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [viewMode, setViewMode] = useState(VIEW_MODES.TODAY);\r\n  const [headerTitle, setHeaderTitle] = useState(format(selectedDate, 'd MMMM', { locale: ru }));\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await fetchTaskDates(setTaskDates);\r\n        await fetchTasksForSelectedDate(selectedDate, setTasks);\r\n        setHeaderTitle(isToday(selectedDate) ? 'Сегодня' : format(selectedDate, 'd MMMM', { locale: ru }));\r\n      } catch (error) {\r\n        console.error('Error fetching tasks:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    const handleTaskUpdate = () => fetchData();\r\n    taskEventEmitter.on('taskUpdated', handleTaskUpdate);\r\n    return () => taskEventEmitter.off('taskUpdated', handleTaskUpdate);\r\n  }, [selectedDate]);\r\n\r\n  const handleViewModeToggle = useCallback(() => {\r\n    setViewMode(prevMode => prevMode === VIEW_MODES.TODAY ? VIEW_MODES.CALENDAR : VIEW_MODES.TODAY);\r\n  }, []);\r\n\r\n  const renderCalendar = () => viewMode === VIEW_MODES.TODAY ? (\r\n    <CustomCalendar selectedDate={selectedDate} onDateChange={setSelectedDate} tasks={tasks} taskDates={taskDates} />\r\n  ) : (\r\n    <VerticalCalendar selectedDate={selectedDate} onDateChange={setSelectedDate} tasks={tasks} taskDates={taskDates} />\r\n  );\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.contentContainer}>\r\n        <View style={styles.taskHeader}>\r\n          <Text style={styles.titleMedium}>{viewMode === VIEW_MODES.TODAY ? headerTitle : 'Календарь'}</Text>\r\n          <View style={styles.calendarBlock}>\r\n            {viewMode === VIEW_MODES.TODAY && <Text style={styles.title}>{format(selectedDate, 'MMMM, yyyy', { locale: ru })}</Text>}\r\n            <TouchableOpacity onPress={handleViewModeToggle}>\r\n              {viewMode === VIEW_MODES.TODAY ? <CalendarIcon /> : <TodayIcon />}\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n        {renderCalendar()}\r\n        {viewMode === VIEW_MODES.TODAY && <AddButton onPress={() => setNewTaskScreenVisible(true)} />}\r\n      </View>\r\n      <Modal visible={isNewTaskScreenVisible} onRequestClose={() => setNewTaskScreenVisible(false)}>\r\n        <NewTaskScreen onClose={() => setNewTaskScreenVisible(false)} />\r\n      </Modal>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default TasksScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAEhE,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,EAAE,QAAQ,iBAAiB;AACpC,OAAOC,MAAM;AACb,SAASC,YAAY,EAAEC,SAAS;AAChC,OAAOC,SAAS;AAChB,OAAOC,cAAc;AACrB,OAAOC,gBAAgB;AACvB,OAAOC,aAAa;AACpB,SAASC,OAAO,EAAEC,cAAc,EAAEC,yBAAyB;AAC3D,SAASC,gBAAgB;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE7C,IAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE;AACZ,CAAC;AAED,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EACxB,IAAAC,SAAA,GAA0B7B,QAAQ,CAAC,EAAE,CAAC;IAAA8B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAkClC,QAAQ,CAAC,EAAE,CAAC;IAAAmC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAvCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAA0DtC,QAAQ,CAAC,KAAK,CAAC;IAAAuC,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAlEE,sBAAsB,GAAAD,UAAA;IAAEE,uBAAuB,GAAAF,UAAA;EACtD,IAAAG,UAAA,GAAwC1C,QAAQ,CAAC,IAAI2C,IAAI,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAb,cAAA,CAAAW,UAAA;IAArDG,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAgC/C,QAAQ,CAACyB,UAAU,CAACC,KAAK,CAAC;IAAAsB,WAAA,GAAAjB,cAAA,CAAAgB,UAAA;IAAnDE,QAAQ,GAAAD,WAAA;IAAEE,WAAW,GAAAF,WAAA;EAC5B,IAAAG,WAAA,GAAsCnD,QAAQ,CAACQ,MAAM,CAACqC,YAAY,EAAE,QAAQ,EAAE;MAAEO,MAAM,EAAE3C;IAAG,CAAC,CAAC,CAAC;IAAA4C,WAAA,GAAAtB,cAAA,CAAAoB,WAAA;IAAvFG,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAElCpD,SAAS,CAAC,YAAM;IACd,IAAMuD,SAAS;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC5B,IAAI;UACF,MAAMxC,cAAc,CAACmB,YAAY,CAAC;UAClC,MAAMlB,yBAAyB,CAAC0B,YAAY,EAAEZ,QAAQ,CAAC;UACvDsB,cAAc,CAACtC,OAAO,CAAC4B,YAAY,CAAC,GAAG,SAAS,GAAGrC,MAAM,CAACqC,YAAY,EAAE,QAAQ,EAAE;YAAEO,MAAM,EAAE3C;UAAG,CAAC,CAAC,CAAC;QACpG,CAAC,CAAC,OAAOkD,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C;MACF,CAAC;MAAA,gBARKH,SAASA,CAAA;QAAA,OAAAC,IAAA,CAAAI,KAAA,OAAAC,SAAA;MAAA;IAAA,GAQd;IAEDN,SAAS,CAAC,CAAC;IACX,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA;MAAA,OAASP,SAAS,CAAC,CAAC;IAAA;IAC1CpC,gBAAgB,CAAC4C,EAAE,CAAC,aAAa,EAAED,gBAAgB,CAAC;IACpD,OAAO;MAAA,OAAM3C,gBAAgB,CAAC6C,GAAG,CAAC,aAAa,EAAEF,gBAAgB,CAAC;IAAA;EACpE,CAAC,EAAE,CAAClB,YAAY,CAAC,CAAC;EAElB,IAAMqB,oBAAoB,GAAGhE,WAAW,CAAC,YAAM;IAC7CgD,WAAW,CAAC,UAAAiB,QAAQ;MAAA,OAAIA,QAAQ,KAAK1C,UAAU,CAACC,KAAK,GAAGD,UAAU,CAACE,QAAQ,GAAGF,UAAU,CAACC,KAAK;IAAA,EAAC;EACjG,CAAC,EAAE,EAAE,CAAC;EAEN,IAAM0C,cAAc,GAAG,SAAjBA,cAAcA,CAAA;IAAA,OAASnB,QAAQ,KAAKxB,UAAU,CAACC,KAAK,GACxDJ,IAAA,CAACR,cAAc;MAAC+B,YAAY,EAAEA,YAAa;MAACwB,YAAY,EAAEvB,eAAgB;MAACd,KAAK,EAAEA,KAAM;MAACI,SAAS,EAAEA;IAAU,CAAE,CAAC,GAEjHd,IAAA,CAACP,gBAAgB;MAAC8B,YAAY,EAAEA,YAAa;MAACwB,YAAY,EAAEvB,eAAgB;MAACd,KAAK,EAAEA,KAAM;MAACI,SAAS,EAAEA;IAAU,CAAE,CACnH;EAAA;EAED,OACEZ,KAAA,CAACjB,YAAY;IAAC+D,KAAK,EAAE5D,MAAM,CAAC6D,SAAU;IAAAC,QAAA,GACpChD,KAAA,CAACrB,IAAI;MAACmE,KAAK,EAAE5D,MAAM,CAAC+D,gBAAiB;MAAAD,QAAA,GACnChD,KAAA,CAACrB,IAAI;QAACmE,KAAK,EAAE5D,MAAM,CAACgE,UAAW;QAAAF,QAAA,GAC7BlD,IAAA,CAAClB,IAAI;UAACkE,KAAK,EAAE5D,MAAM,CAACiE,WAAY;UAAAH,QAAA,EAAEvB,QAAQ,KAAKxB,UAAU,CAACC,KAAK,GAAG4B,WAAW,GAAG;QAAW,CAAO,CAAC,EACnG9B,KAAA,CAACrB,IAAI;UAACmE,KAAK,EAAE5D,MAAM,CAACkE,aAAc;UAAAJ,QAAA,GAC/BvB,QAAQ,KAAKxB,UAAU,CAACC,KAAK,IAAIJ,IAAA,CAAClB,IAAI;YAACkE,KAAK,EAAE5D,MAAM,CAACmE,KAAM;YAAAL,QAAA,EAAEhE,MAAM,CAACqC,YAAY,EAAE,YAAY,EAAE;cAAEO,MAAM,EAAE3C;YAAG,CAAC;UAAC,CAAO,CAAC,EACxHa,IAAA,CAACjB,gBAAgB;YAACyE,OAAO,EAAEZ,oBAAqB;YAAAM,QAAA,EAC7CvB,QAAQ,KAAKxB,UAAU,CAACC,KAAK,GAAGJ,IAAA,CAACX,YAAY,IAAE,CAAC,GAAGW,IAAA,CAACV,SAAS,IAAE;UAAC,CACjD,CAAC;QAAA,CACf,CAAC;MAAA,CACH,CAAC,EACNwD,cAAc,CAAC,CAAC,EAChBnB,QAAQ,KAAKxB,UAAU,CAACC,KAAK,IAAIJ,IAAA,CAACT,SAAS;QAACiE,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMrC,uBAAuB,CAAC,IAAI,CAAC;QAAA;MAAC,CAAE,CAAC;IAAA,CACzF,CAAC,EACPnB,IAAA,CAAChB,KAAK;MAACyE,OAAO,EAAEvC,sBAAuB;MAACwC,cAAc,EAAE,SAAAA,eAAA;QAAA,OAAMvC,uBAAuB,CAAC,KAAK,CAAC;MAAA,CAAC;MAAA+B,QAAA,EAC3FlD,IAAA,CAACN,aAAa;QAACiE,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMxC,uBAAuB,CAAC,KAAK,CAAC;QAAA;MAAC,CAAE;IAAC,CAC3D,CAAC;EAAA,CACI,CAAC;AAEnB,CAAC;AAED,eAAeb,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}