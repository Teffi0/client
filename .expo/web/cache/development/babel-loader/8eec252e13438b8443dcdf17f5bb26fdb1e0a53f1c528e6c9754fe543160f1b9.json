{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport axios from 'axios';\nimport { formatISO, parseISO, isBefore, format } from 'date-fns';\nimport { SERVER_URL } from \"../utils/tasks\";\nimport { taskEventEmitter } from \"../Events\";\nexport function updateTaskStatus(_x, _x2) {\n  return _updateTaskStatus.apply(this, arguments);\n}\nfunction _updateTaskStatus() {\n  _updateTaskStatus = _asyncToGenerator(function* (taskId, taskData) {\n    try {\n      var response = yield axios.put(`${SERVER_URL}/tasks/${taskId}`, taskData);\n      taskEventEmitter.emit('taskUpdated');\n      return response;\n    } catch (error) {\n      console.error('Ошибка при обновлении задачи:', error);\n      throw error;\n    }\n  });\n  return _updateTaskStatus.apply(this, arguments);\n}\nexport var validateFormData = function validateFormData(formData) {\n  var requiredFields = ['selectedService', 'paymentMethod', 'cost', 'startDate', 'endDate', 'startDateTime', 'endDateTime', 'selectedEmployee', 'selectedResponsible', 'fullnameClient'];\n  if (requiredFields.some(function (field) {\n    return !formData[field] || Array.isArray(formData[field]) && formData[field].length === 0;\n  })) {\n    alert('Пожалуйста, заполните все обязательные поля.');\n    return false;\n  }\n  if (isBefore(parseISO(formData.endDate), parseISO(formData.startDate))) {\n    alert('Дата окончания должна быть позже даты начала.');\n    return false;\n  }\n  return true;\n};\nvar formatTaskData = function formatTaskData(formData) {\n  return _objectSpread(_objectSpread({}, formData), {}, {\n    start_date: formData.startDate ? formatISO(formData.startDate) : undefined,\n    end_date: formData.endDate ? formatISO(formData.endDate) : undefined,\n    start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : undefined,\n    end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : undefined,\n    employees: formData.selectedEmployee.join(','),\n    services: formData.selectedService.join(',')\n  });\n};\nexport var fetchOptions = function () {\n  var _ref = _asyncToGenerator(function* (dispatchFormData) {\n    try {\n      var _yield$Promise$all = yield Promise.all([axios.get('http://31.129.101.174/services'), axios.get('http://31.129.101.174/paymentmethods'), axios.get('http://31.129.101.174/employees'), axios.get('http://31.129.101.174/responsibles'), axios.get('http://31.129.101.174/clients')]),\n        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5),\n        servicesResponse = _yield$Promise$all2[0],\n        paymentMethodsResponse = _yield$Promise$all2[1],\n        employeesResponse = _yield$Promise$all2[2],\n        responsiblesResponse = _yield$Promise$all2[3],\n        clientsResponse = _yield$Promise$all2[4];\n      dispatchFormData({\n        type: 'UPDATE_FORM',\n        payload: {\n          serviceOptions: servicesResponse.data,\n          paymentMethodOptions: paymentMethodsResponse.data,\n          responsibleOptions: responsiblesResponse.data,\n          employeesOptions: employeesResponse.data,\n          fullnameClientOptions: clientsResponse.data.map(function (client) {\n            return client.full_name;\n          })\n        }\n      });\n    } catch (error) {\n      console.error('Ошибка при получении данных:', error);\n    }\n  });\n  return function fetchOptions(_x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var handleSaveTask = function () {\n  var _ref2 = _asyncToGenerator(function* (formData) {\n    if (formData.status !== 'черновик' && !validateFormData(formData)) {\n      return;\n    }\n    var serviceString = formData.selectedService.join(', ');\n    var formattedData = formatTaskData(_objectSpread(_objectSpread({}, formData), {}, {\n      service: serviceString\n    }));\n    var employees = formData.employeesOptions.map(function (employee) {\n      return employee.id;\n    });\n    formattedData.employees = employees;\n    formattedData.employees = formData.selectedEmployee;\n    try {\n      var taskId;\n      if (formData.id) {\n        taskId = formData.id;\n      } else {\n        var response = yield axios.post(`${SERVER_URL}/tasks`, formattedData);\n        taskId = response.data.task_id;\n      }\n      if (formData.selectedService && formData.selectedService.length > 0) {\n        yield axios.post(`${SERVER_URL}/tasks/${taskId}/services`, {\n          services: formData.selectedService\n        });\n        console.log('Услуги успешно добавлены к задаче');\n      }\n      if (formData.status === 'выполнено') {\n        var filteredInventory = formData.selectedInventory.filter(function (item) {\n          return item.quantity > 0;\n        });\n        var inventoryData = filteredInventory.map(function (item) {\n          return {\n            inventory_id: item.id,\n            quantity: item.quantity\n          };\n        });\n        yield axios.put(`${SERVER_URL}/tasks/${taskId}/inventory`, {\n          inventory: inventoryData\n        });\n        if (formData.selectedImages && formData.selectedImages.length > 0) {\n          var imagesFormData = new FormData();\n          formData.selectedImages.forEach(function (imageUri, index) {\n            imagesFormData.append('photos', {\n              name: `photo_${index}.jpg`,\n              type: 'image/jpeg',\n              uri: Platform.OS === 'android' ? imageUri : imageUri.replace('file://', '')\n            });\n          });\n          yield axios.post(`${SERVER_URL}/tasks/${taskId}/photos`, imagesFormData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          console.log('Изображения успешно загружены на сервер');\n        }\n      }\n      taskEventEmitter.emit('taskUpdated');\n    } catch (error) {\n      console.error('Ошибка при добавлении задачи:', error);\n    }\n  });\n  return function handleSaveTask(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updateDraft = function () {\n  var _ref3 = _asyncToGenerator(function* (draftId, formData) {\n    console.log('Отправляемые данные:', formData);\n    var dataToSend = {\n      status: formData.status,\n      service: formData.selectedService.join(', '),\n      payment: formData.paymentMethod,\n      cost: formData.cost,\n      start_date: formData.startDate ? format(formData.startDate, 'yyyy-MM-dd') : null,\n      start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : null,\n      end_date: formData.endDate ? format(formData.endDate, 'yyyy-MM-dd') : null,\n      end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : null,\n      responsible: formData.selectedResponsible,\n      fullname_client: formData.fullnameClient,\n      address_client: formData.addressClient,\n      phone: formData.phone,\n      description: formData.description,\n      employees: formData.selectedEmployee.join(','),\n      services: formData.selectedService\n    };\n    console.log('dataToSend данные:', dataToSend);\n    try {\n      var response = yield axios.put(`${SERVER_URL}/tasks/${draftId}`, dataToSend);\n      console.log('Черновик успешно обновлен. Данные ответа:', response.data);\n    } catch (error) {\n      console.error('Ошибка при обновлении черновика:', error);\n    }\n  });\n  return function updateDraft(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","formatISO","parseISO","isBefore","format","SERVER_URL","taskEventEmitter","updateTaskStatus","_x","_x2","_updateTaskStatus","apply","arguments","_asyncToGenerator","taskId","taskData","response","put","emit","error","console","validateFormData","formData","requiredFields","some","field","Array","isArray","length","alert","endDate","startDate","formatTaskData","_objectSpread","start_date","undefined","end_date","start_time","startDateTime","end_time","endDateTime","employees","selectedEmployee","join","services","selectedService","fetchOptions","_ref","dispatchFormData","_yield$Promise$all","Promise","all","get","_yield$Promise$all2","_slicedToArray","servicesResponse","paymentMethodsResponse","employeesResponse","responsiblesResponse","clientsResponse","type","payload","serviceOptions","data","paymentMethodOptions","responsibleOptions","employeesOptions","fullnameClientOptions","map","client","full_name","_x3","handleSaveTask","_ref2","status","serviceString","formattedData","service","employee","id","post","task_id","log","filteredInventory","selectedInventory","filter","item","quantity","inventoryData","inventory_id","inventory","selectedImages","imagesFormData","FormData","forEach","imageUri","index","append","name","uri","Platform","OS","replace","headers","_x4","updateDraft","_ref3","draftId","dataToSend","payment","paymentMethod","cost","responsible","selectedResponsible","fullname_client","fullnameClient","address_client","addressClient","phone","description","_x5","_x6"],"sources":["C:/Users/fred/Desktop/client/src/utils/taskScreenHelpers.js"],"sourcesContent":["import axios from 'axios';\r\nimport { formatISO, parseISO, isBefore, format } from 'date-fns';\r\nimport { SERVER_URL } from '../utils/tasks';\r\nimport { taskEventEmitter } from '../Events';\r\n\r\nexport async function updateTaskStatus(taskId, taskData) {\r\n    try {\r\n        const response = await axios.put(`${SERVER_URL}/tasks/${taskId}`, taskData);\r\n        taskEventEmitter.emit('taskUpdated');\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Ошибка при обновлении задачи:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\nexport const validateFormData = (formData) => {\r\n    const requiredFields = ['selectedService', 'paymentMethod', 'cost', 'startDate', 'endDate', 'startDateTime', 'endDateTime', 'selectedEmployee', 'selectedResponsible', 'fullnameClient'];\r\n    if (requiredFields.some(field => !formData[field] || (Array.isArray(formData[field]) && formData[field].length === 0))) {\r\n        alert('Пожалуйста, заполните все обязательные поля.');\r\n        return false;\r\n    }\r\n    if (isBefore(parseISO(formData.endDate), parseISO(formData.startDate))) {\r\n        alert('Дата окончания должна быть позже даты начала.');\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst formatTaskData = (formData) => {\r\n    return {\r\n        ...formData,\r\n        start_date: formData.startDate ? formatISO(formData.startDate) : undefined,\r\n        end_date: formData.endDate ? formatISO(formData.endDate) : undefined,\r\n        start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : undefined,\r\n        end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : undefined,\r\n        employees: formData.selectedEmployee.join(','),\r\n        services: formData.selectedService.join(','),\r\n    };\r\n};\r\n\r\n\r\nexport const fetchOptions = async (dispatchFormData) => {\r\n    try {\r\n        const [servicesResponse, paymentMethodsResponse, employeesResponse, responsiblesResponse, clientsResponse] = await Promise.all([\r\n            axios.get('http://31.129.101.174/services'),\r\n            axios.get('http://31.129.101.174/paymentmethods'),\r\n            axios.get('http://31.129.101.174/employees'),\r\n            axios.get('http://31.129.101.174/responsibles'),\r\n            axios.get('http://31.129.101.174/clients')\r\n        ]);\r\n        dispatchFormData({\r\n            type: 'UPDATE_FORM',\r\n            payload: {\r\n                serviceOptions: servicesResponse.data,\r\n                paymentMethodOptions: paymentMethodsResponse.data,\r\n                responsibleOptions: responsiblesResponse.data,\r\n                employeesOptions: employeesResponse.data,\r\n                fullnameClientOptions: clientsResponse.data.map(client => client.full_name)\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Ошибка при получении данных:', error);\r\n    }\r\n};\r\n\r\nexport const handleSaveTask = async (formData) => {\r\n    // Если статус не \"черновик\", проводим валидацию\r\n    if (formData.status !== 'черновик' && !validateFormData(formData)) {\r\n        return; // Если валидация не пройдена, прекращаем выполнение функции\r\n    }\r\n\r\n    const serviceString = formData.selectedService.join(', ');\r\n\r\n    const formattedData = formatTaskData({ ...formData, service: serviceString });\r\n\r\n    // Преобразуем данные сотрудников в массив ID\r\n    const employees = formData.employeesOptions.map(employee => employee.id);\r\n    formattedData.employees = employees;\r\n\r\n    // После изменения\r\n    formattedData.employees = formData.selectedEmployee;\r\n    try {\r\n        let taskId;\r\n        if (formData.id) {\r\n            taskId = formData.id;\r\n        } else {\r\n            // Если это новая задача, создаем ее и получаем новый id\r\n            const response = await axios.post(`${SERVER_URL}/tasks`, formattedData);\r\n            taskId = response.data.task_id;\r\n        }\r\n\r\n        // Добавление услуг к задаче, если они есть\r\n        if (formData.selectedService && formData.selectedService.length > 0) {\r\n            await axios.post(`${SERVER_URL}/tasks/${taskId}/services`, {\r\n                services: formData.selectedService\r\n            });\r\n            console.log('Услуги успешно добавлены к задаче');\r\n        }\r\n\r\n        if (formData.status === 'выполнено') {\r\n            // Фильтрация элементов с количеством, равным нулю\r\n            const filteredInventory = formData.selectedInventory.filter(item => item.quantity > 0);\r\n\r\n            // Формирование данных для обновления инвентаря\r\n            const inventoryData = filteredInventory.map(item => ({\r\n                inventory_id: item.id,\r\n                quantity: item.quantity\r\n            }));\r\n\r\n            await axios.put(`${SERVER_URL}/tasks/${taskId}/inventory`, {\r\n                inventory: inventoryData\r\n            });\r\n\r\n            if (formData.selectedImages && formData.selectedImages.length > 0) {\r\n                const imagesFormData = new FormData();\r\n                formData.selectedImages.forEach((imageUri, index) => {\r\n                    imagesFormData.append('photos', {\r\n                        name: `photo_${index}.jpg`,\r\n                        type: 'image/jpeg',\r\n                        uri: Platform.OS === 'android' ? imageUri : imageUri.replace('file://', ''),\r\n                    });\r\n                });\r\n\r\n                await axios.post(`${SERVER_URL}/tasks/${taskId}/photos`, imagesFormData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                console.log('Изображения успешно загружены на сервер');\r\n            }\r\n        }\r\n\r\n        taskEventEmitter.emit('taskUpdated');\r\n    } catch (error) {\r\n        console.error('Ошибка при добавлении задачи:', error);\r\n    }\r\n};\r\n\r\n// Функция для обновления черновика\r\nexport const updateDraft = async (draftId, formData) => {\r\n    console.log('Отправляемые данные:', formData);\r\n\r\n    // Преобразование данных в формат, ожидаемый сервером\r\n    const dataToSend = {\r\n        status: formData.status,\r\n        service: formData.selectedService.join(', '),\r\n        payment: formData.paymentMethod,\r\n        cost: formData.cost,\r\n        start_date: formData.startDate ? format(formData.startDate, 'yyyy-MM-dd') : null,\r\n        start_time: formData.startDateTime ? format(formData.startDateTime, 'HH:mm') : null,\r\n        end_date: formData.endDate ? format(formData.endDate, 'yyyy-MM-dd') : null,\r\n        end_time: formData.endDateTime ? format(formData.endDateTime, 'HH:mm') : null,\r\n        responsible: formData.selectedResponsible,\r\n        fullname_client: formData.fullnameClient,\r\n        address_client: formData.addressClient,\r\n        phone: formData.phone,\r\n        description: formData.description,\r\n        employees: formData.selectedEmployee.join(','), // Предполагается, что это массив ID сотрудников\r\n        services: formData.selectedService, // Предполагается, что это массив ID услуг\r\n        // Добавьте другие поля, если они необходимы\r\n    };\r\n    console.log('dataToSend данные:', dataToSend);\r\n    try {\r\n        const response = await axios.put(`${SERVER_URL}/tasks/${draftId}`, dataToSend);\r\n        console.log('Черновик успешно обновлен. Данные ответа:', response.data);\r\n    } catch (error) {\r\n        console.error('Ошибка при обновлении черновика:', error);\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}